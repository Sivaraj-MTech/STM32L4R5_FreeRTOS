
6_ChangingOwnPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c84  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007e44  08007e44  00008e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f24  08007f24  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20040000  08007f2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  2004006c  08007f98  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20042150  08007f98  00009150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020afe  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b6  00000000  00000000  00029b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0002df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001581  00000000  00000000  0002fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005790  00000000  00000000  00031089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f202  00000000  00000000  00036819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011645c  00000000  00000000  00055a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016be77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c40  00000000  00000000  0016bebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00173afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004006c 	.word	0x2004006c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007e2c 	.word	0x08007e2c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040070 	.word	0x20040070
 80001fc:	08007e2c 	.word	0x08007e2c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler, RedTaskProfiler, GreenTaskProfiler;
TaskHandle_t blue_handle, red_handle, green_handle;

int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af02      	add	r7, sp, #8
  HAL_Init();
 8000532:	f000 fd32 	bl	8000f9a <HAL_Init>
  SystemClock_Config();
 8000536:	f000 f88b 	bl	8000650 <SystemClock_Config>
  MX_GPIO_Init();
 800053a:	f000 f9a5 	bl	8000888 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800053e:	f000 f8db 	bl	80006f8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000542:	f000 f927 	bl	8000794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000546:	f000 f971 	bl	800082c <MX_USB_OTG_FS_PCD_Init>

  xTaskCreate(vBlueLedControllerTask,
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <main+0x68>)
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2302      	movs	r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	2264      	movs	r2, #100	@ 0x64
 8000556:	4910      	ldr	r1, [pc, #64]	@ (8000598 <main+0x6c>)
 8000558:	4810      	ldr	r0, [pc, #64]	@ (800059c <main+0x70>)
 800055a:	f005 f901 	bl	8005760 <xTaskCreate>
			  100,
			  NULL,
			  2,
			  &blue_handle);

  xTaskCreate(vRedLedControllerTask,
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <main+0x74>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2264      	movs	r2, #100	@ 0x64
 800056a:	490e      	ldr	r1, [pc, #56]	@ (80005a4 <main+0x78>)
 800056c:	480e      	ldr	r0, [pc, #56]	@ (80005a8 <main+0x7c>)
 800056e:	f005 f8f7 	bl	8005760 <xTaskCreate>
			  100,
			  NULL,
			  2,
			  &red_handle);

  xTaskCreate(vGreenLedControllerTask,
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <main+0x80>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2264      	movs	r2, #100	@ 0x64
 800057e:	490c      	ldr	r1, [pc, #48]	@ (80005b0 <main+0x84>)
 8000580:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <main+0x88>)
 8000582:	f005 f8ed 	bl	8005760 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &green_handle);

  vTaskStartScheduler();
 8000586:	f005 facf 	bl	8005b28 <vTaskStartScheduler>

  while (1)
  {
	  printf("hello stm32 \r\n");
 800058a:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <main+0x8c>)
 800058c:	f007 f8ac 	bl	80076e8 <puts>
 8000590:	e7fb      	b.n	800058a <main+0x5e>
 8000592:	bf00      	nop
 8000594:	200406a0 	.word	0x200406a0
 8000598:	08007e44 	.word	0x08007e44
 800059c:	080005bd 	.word	0x080005bd
 80005a0:	200406a4 	.word	0x200406a4
 80005a4:	08007e58 	.word	0x08007e58
 80005a8:	080005d5 	.word	0x080005d5
 80005ac:	200406a8 	.word	0x200406a8
 80005b0:	08007e6c 	.word	0x08007e6c
 80005b4:	08000615 	.word	0x08000615
 80005b8:	08007e84 	.word	0x08007e84

080005bc <vBlueLedControllerTask>:
  }

}

void vBlueLedControllerTask(void *pvParameters)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

	while(1)
	{
		// printf("BlueLedController Task running.., \r\n");
		BlueTaskProfiler++;
 80005c4:	4b02      	ldr	r3, [pc, #8]	@ (80005d0 <vBlueLedControllerTask+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a01      	ldr	r2, [pc, #4]	@ (80005d0 <vBlueLedControllerTask+0x14>)
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e7f9      	b.n	80005c4 <vBlueLedControllerTask+0x8>
 80005d0:	20040694 	.word	0x20040694

080005d4 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		// printf("RedLedController Task running.., \r\n");
		RedTaskProfiler++;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <vRedLedControllerTask+0x34>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a09      	ldr	r2, [pc, #36]	@ (8000608 <vRedLedControllerTask+0x34>)
 80005e4:	6013      	str	r3, [r2, #0]
		for(i=0;i<700000;i++){
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e008      	b.n	80005fe <vRedLedControllerTask+0x2a>
			vTaskPrioritySet(green_handle,3);
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <vRedLedControllerTask+0x38>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2103      	movs	r1, #3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 f9fa 	bl	80059ec <vTaskPrioritySet>
		for(i=0;i<700000;i++){
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4a03      	ldr	r2, [pc, #12]	@ (8000610 <vRedLedControllerTask+0x3c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	ddf2      	ble.n	80005ec <vRedLedControllerTask+0x18>
		RedTaskProfiler++;
 8000606:	e7e9      	b.n	80005dc <vRedLedControllerTask+0x8>
 8000608:	20040698 	.word	0x20040698
 800060c:	200406a8 	.word	0x200406a8
 8000610:	000aae5f 	.word	0x000aae5f

08000614 <vGreenLedControllerTask>:
		}
	}
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// printf("GreenLedController Task running.., \r\n");
		GreenTaskProfiler++;
 800061c:	4b02      	ldr	r3, [pc, #8]	@ (8000628 <vGreenLedControllerTask+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a01      	ldr	r2, [pc, #4]	@ (8000628 <vGreenLedControllerTask+0x14>)
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	e7f9      	b.n	800061c <vGreenLedControllerTask+0x8>
 8000628:	2004069c 	.word	0x2004069c

0800062c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  // Example for UART2, assuming huart2 is initialized
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f003 f8e5 	bl	800380c <HAL_UART_Transmit>
  return ch;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2004011c 	.word	0x2004011c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	@ 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	@ 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 f922 	bl	80078a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000672:	2000      	movs	r0, #0
 8000674:	f001 f8ce 	bl	8001814 <HAL_PWREx_ControlVoltageScaling>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800067e:	f000 f9b9 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000682:	2322      	movs	r3, #34	@ 0x22
 8000684:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2340      	movs	r3, #64	@ 0x40
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80006a0:	231e      	movs	r3, #30
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f971 	bl	800199c <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c0:	f000 f998 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2303      	movs	r3, #3
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fd76 	bl	80021d0 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ea:	f000 f983 	bl	80009f4 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	@ 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 80006fe:	4a23      	ldr	r2, [pc, #140]	@ (800078c <MX_LPUART1_UART_Init+0x94>)
 8000700:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000702:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000704:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <MX_LPUART1_UART_Init+0x98>)
 8000706:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 800070a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800070e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000740:	4811      	ldr	r0, [pc, #68]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000742:	f003 f813 	bl	800376c <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f952 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000754:	f003 fe3c 	bl	80043d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f949 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000766:	f003 fe71 	bl	800444c <HAL_UARTEx_SetRxFifoThreshold>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f940 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	@ (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000776:	f003 fdf2 	bl	800435e <HAL_UARTEx_DisableFifoMode>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f938 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20040088 	.word	0x20040088
 800078c:	40008000 	.word	0x40008000
 8000790:	00033324 	.word	0x00033324

08000794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000798:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 800079a:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <MX_USART3_UART_Init+0x94>)
 800079c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079e:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007de:	f002 ffc5 	bl	800376c <HAL_UART_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 f904 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007f0:	f003 fdee 	bl	80043d0 <HAL_UARTEx_SetTxFifoThreshold>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f8fb 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4808      	ldr	r0, [pc, #32]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 8000802:	f003 fe23 	bl	800444c <HAL_UARTEx_SetRxFifoThreshold>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f8f2 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 8000812:	f003 fda4 	bl	800435e <HAL_UARTEx_DisableFifoMode>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800081c:	f000 f8ea 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2004011c 	.word	0x2004011c
 8000828:	40004800 	.word	0x40004800

0800082c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2206      	movs	r2, #6
 800083c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2202      	movs	r2, #2
 8000848:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2201      	movs	r2, #1
 800084e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2201      	movs	r2, #1
 8000860:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2201      	movs	r2, #1
 800086c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	f000 fe7c 	bl	800156c <HAL_PCD_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f8bb 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200401b0 	.word	0x200401b0

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b48      	ldr	r3, [pc, #288]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a47      	ldr	r2, [pc, #284]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	4b42      	ldr	r3, [pc, #264]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a41      	ldr	r2, [pc, #260]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b3f      	ldr	r3, [pc, #252]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b3c      	ldr	r3, [pc, #240]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a3b      	ldr	r2, [pc, #236]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b39      	ldr	r3, [pc, #228]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b36      	ldr	r3, [pc, #216]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a35      	ldr	r2, [pc, #212]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b33      	ldr	r3, [pc, #204]	@ (80009c0 <MX_GPIO_Init+0x138>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fe:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <MX_GPIO_Init+0x138>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a2f      	ldr	r2, [pc, #188]	@ (80009c0 <MX_GPIO_Init+0x138>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <MX_GPIO_Init+0x138>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000916:	f001 f831 	bl	800197c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <MX_GPIO_Init+0x138>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a28      	ldr	r2, [pc, #160]	@ (80009c0 <MX_GPIO_Init+0x138>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <MX_GPIO_Init+0x138>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000938:	4822      	ldr	r0, [pc, #136]	@ (80009c4 <MX_GPIO_Init+0x13c>)
 800093a:	f000 fdff 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	@ 0x40
 8000942:	4821      	ldr	r0, [pc, #132]	@ (80009c8 <MX_GPIO_Init+0x140>)
 8000944:	f000 fdfa 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481b      	ldr	r0, [pc, #108]	@ (80009cc <MX_GPIO_Init+0x144>)
 8000960:	f000 fc5a 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000964:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <MX_GPIO_Init+0x13c>)
 800097e:	f000 fc4b 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000982:	2320      	movs	r3, #32
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <MX_GPIO_Init+0x140>)
 8000996:	f000 fc3f 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	@ 0x40
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_GPIO_Init+0x140>)
 80009b2:	f000 fc31 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	@ 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000400 	.word	0x48000400
 80009c8:	48001800 	.word	0x48001800
 80009cc:	48000800 	.word	0x48000800

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009e2:	f000 faf3 	bl	8000fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 fbc1 	bl	80011c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0b0      	sub	sp, #192	@ 0xc0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	2294      	movs	r2, #148	@ 0x94
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 ff19 	bl	80078a8 <memset>
  if(huart->Instance==LPUART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a43      	ldr	r2, [pc, #268]	@ (8000b88 <HAL_UART_MspInit+0x138>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13e      	bne.n	8000afe <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a80:	2320      	movs	r3, #32
 8000a82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fe8f 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff ffac 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000aa8:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab4:	4b35      	ldr	r3, [pc, #212]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a34      	ldr	r2, [pc, #208]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b32      	ldr	r3, [pc, #200]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000acc:	f000 ff56 	bl	800197c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ad0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000aea:	2308      	movs	r3, #8
 8000aec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000af4:	4619      	mov	r1, r3
 8000af6:	4826      	ldr	r0, [pc, #152]	@ (8000b90 <HAL_UART_MspInit+0x140>)
 8000af8:	f000 fb8e 	bl	8001218 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afc:	e040      	b.n	8000b80 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <HAL_UART_MspInit+0x144>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d13b      	bne.n	8000b80 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fe4b 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000b20:	f7ff ff68 	bl	80009f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b28:	4a18      	ldr	r2, [pc, #96]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_UART_MspInit+0x13c>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <HAL_UART_MspInit+0x148>)
 8000b7c:	f000 fb4c 	bl	8001218 <HAL_GPIO_Init>
}
 8000b80:	bf00      	nop
 8000b82:	37c0      	adds	r7, #192	@ 0xc0
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40008000 	.word	0x40008000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48001800 	.word	0x48001800
 8000b94:	40004800 	.word	0x40004800
 8000b98:	48000c00 	.word	0x48000c00

08000b9c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0b0      	sub	sp, #192	@ 0xc0
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	2294      	movs	r2, #148	@ 0x94
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 fe73 	bl	80078a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bca:	d16c      	bne.n	8000ca6 <HAL_PCD_MspInit+0x10a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fde7 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000be8:	f7ff ff04 	bl	80009f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c04:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f000 faf3 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f000 fae2 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c58:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c6c:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d114      	bne.n	8000ca2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000c90:	f000 fe64 	bl	800195c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c98:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <HAL_PCD_MspInit+0x114>)
 8000c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ca0:	e001      	b.n	8000ca6 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000ca2:	f000 fe5b 	bl	800195c <HAL_PWREx_EnableVddUSB>
}
 8000ca6:	bf00      	nop
 8000ca8:	37c0      	adds	r7, #192	@ 0xc0
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d7c <HAL_InitTick+0xc8>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d7c <HAL_InitTick+0xc8>)
 8000cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <HAL_InitTick+0xc8>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cda:	f107 020c 	add.w	r2, r7, #12
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 fc71 	bl	80025cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cea:	f001 fc59 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8000cee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf2:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <HAL_InitTick+0xcc>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	0c9b      	lsrs	r3, r3, #18
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d00:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d02:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d10:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d24:	4817      	ldr	r0, [pc, #92]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d26:	f002 fa5b 	bl	80031e0 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d11b      	bne.n	8000d70 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d38:	4812      	ldr	r0, [pc, #72]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000d3a:	f002 fab3 	bl	80032a4 <HAL_TIM_Base_Start_IT>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d111      	bne.n	8000d70 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d4c:	2019      	movs	r0, #25
 8000d4e:	f000 fa55 	bl	80011fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d808      	bhi.n	8000d6a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2019      	movs	r0, #25
 8000d5e:	f000 fa31 	bl	80011c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <HAL_InitTick+0xd8>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e002      	b.n	8000d70 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	@ 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	200406ac 	.word	0x200406ac
 8000d88:	40012c00 	.word	0x40012c00
 8000d8c:	20040004 	.word	0x20040004

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dce:	f002 fad9 	bl	8003384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200406ac 	.word	0x200406ac

08000ddc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e00a      	b.n	8000e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dee:	f3af 8000 	nop.w
 8000df2:	4601      	mov	r1, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	b2ca      	uxtb	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf0      	blt.n	8000dee <_read+0x12>
  }

  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e009      	b.n	8000e3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fbfb 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf1      	blt.n	8000e28 <_write+0x12>
  }
  return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e76:	605a      	str	r2, [r3, #4]
  return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_isatty>:

int _isatty(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f006 fd2c 	bl	8007944 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200a0000 	.word	0x200a0000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200406f8 	.word	0x200406f8
 8000f20:	20042150 	.word	0x20042150

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f006 fceb 	bl	8007950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fad7 	bl	800052c <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f84:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000f88:	2004006c 	.word	0x2004006c
  ldr r2, =_sidata
 8000f8c:	08007f2c 	.word	0x08007f2c
  ldr r2, =_sbss
 8000f90:	2004006c 	.word	0x2004006c
  ldr r4, =_ebss
 8000f94:	20042150 	.word	0x20042150

08000f98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_IRQHandler>

08000f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f902 	bl	80011ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff fe82 	bl	8000cb4 <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e001      	b.n	8000fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fbc:	f7ff fd20 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20040008 	.word	0x20040008
 8000ff0:	200406fc 	.word	0x200406fc

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200406fc 	.word	0x200406fc

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20040008 	.word	0x20040008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	@ 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff4c 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d6:	f7ff ff61 	bl	800109c <__NVIC_GetPriorityGrouping>
 80011da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff ffb1 	bl	8001148 <NVIC_EncodePriority>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff80 	bl	80010f4 <__NVIC_SetPriority>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff54 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e166      	b.n	80014f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8158 	beq.w	80014f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0203 	and.w	r2, r3, #3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 80b2 	beq.w	80014f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b61      	ldr	r3, [pc, #388]	@ (8001514 <HAL_GPIO_Init+0x2fc>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	4a60      	ldr	r2, [pc, #384]	@ (8001514 <HAL_GPIO_Init+0x2fc>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6613      	str	r3, [r2, #96]	@ 0x60
 8001398:	4b5e      	ldr	r3, [pc, #376]	@ (8001514 <HAL_GPIO_Init+0x2fc>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001518 <HAL_GPIO_Init+0x300>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013ce:	d02b      	beq.n	8001428 <HAL_GPIO_Init+0x210>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a52      	ldr	r2, [pc, #328]	@ (800151c <HAL_GPIO_Init+0x304>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d025      	beq.n	8001424 <HAL_GPIO_Init+0x20c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a51      	ldr	r2, [pc, #324]	@ (8001520 <HAL_GPIO_Init+0x308>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d01f      	beq.n	8001420 <HAL_GPIO_Init+0x208>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a50      	ldr	r2, [pc, #320]	@ (8001524 <HAL_GPIO_Init+0x30c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d019      	beq.n	800141c <HAL_GPIO_Init+0x204>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001528 <HAL_GPIO_Init+0x310>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d013      	beq.n	8001418 <HAL_GPIO_Init+0x200>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a4e      	ldr	r2, [pc, #312]	@ (800152c <HAL_GPIO_Init+0x314>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1fc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001530 <HAL_GPIO_Init+0x318>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1f8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a4c      	ldr	r2, [pc, #304]	@ (8001534 <HAL_GPIO_Init+0x31c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1f4>
 8001408:	2307      	movs	r3, #7
 800140a:	e00e      	b.n	800142a <HAL_GPIO_Init+0x212>
 800140c:	2308      	movs	r3, #8
 800140e:	e00c      	b.n	800142a <HAL_GPIO_Init+0x212>
 8001410:	2306      	movs	r3, #6
 8001412:	e00a      	b.n	800142a <HAL_GPIO_Init+0x212>
 8001414:	2305      	movs	r3, #5
 8001416:	e008      	b.n	800142a <HAL_GPIO_Init+0x212>
 8001418:	2304      	movs	r3, #4
 800141a:	e006      	b.n	800142a <HAL_GPIO_Init+0x212>
 800141c:	2303      	movs	r3, #3
 800141e:	e004      	b.n	800142a <HAL_GPIO_Init+0x212>
 8001420:	2302      	movs	r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x212>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_GPIO_Init+0x212>
 8001428:	2300      	movs	r3, #0
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	f002 0203 	and.w	r2, r2, #3
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	4093      	lsls	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800143a:	4937      	ldr	r1, [pc, #220]	@ (8001518 <HAL_GPIO_Init+0x300>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001448:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <HAL_GPIO_Init+0x320>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800146c:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <HAL_GPIO_Init+0x320>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_GPIO_Init+0x320>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001496:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <HAL_GPIO_Init+0x320>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800149c:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <HAL_GPIO_Init+0x320>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_GPIO_Init+0x320>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_GPIO_Init+0x320>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <HAL_GPIO_Init+0x320>)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f ae91 	bne.w	8001228 <HAL_GPIO_Init+0x10>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	48000400 	.word	0x48000400
 8001520:	48000800 	.word	0x48000800
 8001524:	48000c00 	.word	0x48000c00
 8001528:	48001000 	.word	0x48001000
 800152c:	48001400 	.word	0x48001400
 8001530:	48001800 	.word	0x48001800
 8001534:	48001c00 	.word	0x48001c00
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001558:	e002      	b.n	8001560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e101      	b.n	8001782 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fb02 	bl	8000b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f807 	bl	80045be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7c1a      	ldrb	r2, [r3, #16]
 80015b8:	f88d 2000 	strb.w	r2, [sp]
 80015bc:	3304      	adds	r3, #4
 80015be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c0:	f002 ffd0 	bl	8004564 <USB_CoreInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0d5      	b.n	8001782 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 ffff 	bl	80045e0 <USB_SetCurrentMode>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0c6      	b.n	8001782 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e04a      	b.n	8001690 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3315      	adds	r3, #21
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3314      	adds	r3, #20
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	b298      	uxth	r0, r3
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	332e      	adds	r3, #46	@ 0x2e
 8001636:	4602      	mov	r2, r0
 8001638:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3318      	adds	r3, #24
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	331c      	adds	r3, #28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	3320      	adds	r3, #32
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	3324      	adds	r3, #36	@ 0x24
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	3301      	adds	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3af      	bcc.n	80015fa <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e044      	b.n	800172a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	3301      	adds	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3b5      	bcc.n	80016a0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7c1a      	ldrb	r2, [r3, #16]
 800173c:	f88d 2000 	strb.w	r2, [sp]
 8001740:	3304      	adds	r3, #4
 8001742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001744:	f002 ff98 	bl	8004678 <USB_DevInit>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2202      	movs	r2, #2
 8001752:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e013      	b.n	8001782 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7b1b      	ldrb	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f80a 	bl	800178a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 f93d 	bl	80049fa <USB_DevDisconnect>

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	f043 0303 	orr.w	r3, r3, #3
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_PWREx_GetVoltageRange+0x3c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e4:	d102      	bne.n	80017ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80017e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ea:	e00b      	b.n	8001804 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_PWREx_GetVoltageRange+0x3c>)
 80017ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017fa:	d102      	bne.n	8001802 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80017fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001800:	e000      	b.n	8001804 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001802:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000

08001814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d141      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001822:	4b4b      	ldr	r3, [pc, #300]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182e:	d131      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001830:	4b47      	ldr	r3, [pc, #284]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001836:	4a46      	ldr	r2, [pc, #280]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800183c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001840:	4b43      	ldr	r3, [pc, #268]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001848:	4a41      	ldr	r2, [pc, #260]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001850:	4b40      	ldr	r3, [pc, #256]	@ (8001954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2232      	movs	r2, #50	@ 0x32
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4a3f      	ldr	r2, [pc, #252]	@ (8001958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9b      	lsrs	r3, r3, #18
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001866:	e002      	b.n	800186e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3b01      	subs	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186e:	4b38      	ldr	r3, [pc, #224]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800187a:	d102      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f2      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001882:	4b33      	ldr	r3, [pc, #204]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800188e:	d158      	bne.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e057      	b.n	8001944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001894:	4b2e      	ldr	r3, [pc, #184]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800189a:	4a2d      	ldr	r2, [pc, #180]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018a4:	e04d      	b.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ac:	d141      	bne.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ba:	d131      	bne.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018bc:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018c2:	4a23      	ldr	r2, [pc, #140]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2232      	movs	r2, #50	@ 0x32
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	3301      	adds	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f2:	e002      	b.n	80018fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001906:	d102      	bne.n	800190e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f2      	bne.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800191a:	d112      	bne.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e011      	b.n	8001944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001930:	e007      	b.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001940:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40007000 	.word	0x40007000
 8001954:	20040000 	.word	0x20040000
 8001958:	431bde83 	.word	0x431bde83

0800195c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196a:	6053      	str	r3, [r2, #4]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40007000 	.word	0x40007000

0800197c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800198a:	6053      	str	r3, [r2, #4]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40007000 	.word	0x40007000

0800199c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f000 bc08 	b.w	80021c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b0:	4b96      	ldr	r3, [pc, #600]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ba:	4b94      	ldr	r3, [pc, #592]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80e4 	beq.w	8001b9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4c>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	f040 808b 	bne.w	8001af6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f040 8087 	bne.w	8001af6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e8:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x64>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e3df      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4b81      	ldr	r3, [pc, #516]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_RCC_OscConfig+0x7e>
 8001a10:	4b7e      	ldr	r3, [pc, #504]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a18:	e005      	b.n	8001a26 <HAL_RCC_OscConfig+0x8a>
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d223      	bcs.n	8001a72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fdfe 	bl	8002630 <RCC_SetFlashLatencyFromMSIRange>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e3c0      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3e:	4b73      	ldr	r3, [pc, #460]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a72      	ldr	r2, [pc, #456]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b70      	ldr	r3, [pc, #448]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	496d      	ldr	r1, [pc, #436]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	4968      	ldr	r1, [pc, #416]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e025      	b.n	8001abe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a65      	ldr	r2, [pc, #404]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4960      	ldr	r1, [pc, #384]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a90:	4b5e      	ldr	r3, [pc, #376]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	495b      	ldr	r1, [pc, #364]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fdbe 	bl	8002630 <RCC_SetFlashLatencyFromMSIRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e380      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001abe:	f000 fcc1 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b51      	ldr	r3, [pc, #324]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4950      	ldr	r1, [pc, #320]	@ (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a4e      	ldr	r2, [pc, #312]	@ (8001c14 <HAL_RCC_OscConfig+0x278>)
 8001adc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f8e6 	bl	8000cb4 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d052      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	e364      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d032      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001afe:	4b43      	ldr	r3, [pc, #268]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a42      	ldr	r2, [pc, #264]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa73 	bl	8000ff4 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b12:	f7ff fa6f 	bl	8000ff4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e34d      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b24:	4b39      	ldr	r3, [pc, #228]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a35      	ldr	r2, [pc, #212]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b33      	ldr	r3, [pc, #204]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4930      	ldr	r1, [pc, #192]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	492b      	ldr	r1, [pc, #172]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e01a      	b.n	8001b9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b64:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa40 	bl	8000ff4 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b78:	f7ff fa3c 	bl	8000ff4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e31a      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1dc>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d073      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x21c>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d063      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d15f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e2f7      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x24c>
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e025      	b.n	8001c34 <HAL_RCC_OscConfig+0x298>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf0:	d114      	bne.n	8001c1c <HAL_RCC_OscConfig+0x280>
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a02      	ldr	r2, [pc, #8]	@ (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e013      	b.n	8001c34 <HAL_RCC_OscConfig+0x298>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08007eac 	.word	0x08007eac
 8001c14:	20040000 	.word	0x20040000
 8001c18:	20040004 	.word	0x20040004
 8001c1c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a9f      	ldr	r2, [pc, #636]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f9da 	bl	8000ff4 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f9d6 	bl	8000ff4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e2b4      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	4b92      	ldr	r3, [pc, #584]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2a8>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f9c6 	bl	8000ff4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f9c2 	bl	8000ff4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e2a0      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	4b88      	ldr	r3, [pc, #544]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2d0>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d060      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x310>
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d116      	bne.n	8001cda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x328>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e27d      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b76      	ldr	r3, [pc, #472]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4973      	ldr	r1, [pc, #460]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd8:	e040      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d023      	beq.n	8001d2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff f981 	bl	8000ff4 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f97d 	bl	8000ff4 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e25b      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	4b65      	ldr	r3, [pc, #404]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b62      	ldr	r3, [pc, #392]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	495f      	ldr	r1, [pc, #380]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e018      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f95d 	bl	8000ff4 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f959 	bl	8000ff4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e237      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d50:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d03c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01c      	beq.n	8001daa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d76:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f938 	bl	8000ff4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f934 	bl	8000ff4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e212      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ef      	beq.n	8001d88 <HAL_RCC_OscConfig+0x3ec>
 8001da8:	e01b      	b.n	8001de2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001daa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7ff f91b 	bl	8000ff4 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f917 	bl	8000ff4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1f5      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd4:	4b32      	ldr	r3, [pc, #200]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80a6 	beq.w	8001f3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001df4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	4a26      	ldr	r2, [pc, #152]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_RCC_OscConfig+0x508>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d118      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_RCC_OscConfig+0x508>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <HAL_RCC_OscConfig+0x508>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e34:	f7ff f8de 	bl	8000ff4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3c:	f7ff f8da 	bl	8000ff4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1b8      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_RCC_OscConfig+0x508>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4d8>
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e72:	e029      	b.n	8001ec8 <HAL_RCC_OscConfig+0x52c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d115      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x50c>
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a03      	ldr	r2, [pc, #12]	@ (8001ea0 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9c:	e014      	b.n	8001ec8 <HAL_RCC_OscConfig+0x52c>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eae:	4a9c      	ldr	r2, [pc, #624]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb8:	4b99      	ldr	r3, [pc, #612]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a98      	ldr	r2, [pc, #608]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d016      	beq.n	8001efe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f890 	bl	8000ff4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7ff f88c 	bl	8000ff4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e168      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eee:	4b8c      	ldr	r3, [pc, #560]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ed      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x53c>
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7ff f879 	bl	8000ff4 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f875 	bl	8000ff4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e151      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f1c:	4b80      	ldr	r3, [pc, #512]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ed      	bne.n	8001f06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f30:	4b7b      	ldr	r3, [pc, #492]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	4a7a      	ldr	r2, [pc, #488]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d03c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f50:	4b73      	ldr	r3, [pc, #460]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f56:	4a72      	ldr	r2, [pc, #456]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7ff f848 	bl	8000ff4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f68:	f7ff f844 	bl	8000ff4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e122      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f7a:	4b69      	ldr	r3, [pc, #420]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCC_OscConfig+0x5cc>
 8001f88:	e01b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f8a:	4b65      	ldr	r3, [pc, #404]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f90:	4a63      	ldr	r2, [pc, #396]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f82b 	bl	8000ff4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa2:	f7ff f827 	bl	8000ff4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e105      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ef      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80f9 	beq.w	80021be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	f040 80cf 	bne.w	8002174 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fd6:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0203 	and.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d12c      	bne.n	8002044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d123      	bne.n	8002044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002006:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d11b      	bne.n	8002044 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d113      	bne.n	8002044 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d109      	bne.n	8002044 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	3b01      	subs	r3, #1
 800203e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d071      	beq.n	8002128 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d068      	beq.n	800211c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800204a:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002056:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0ac      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002066:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 800206c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002070:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002072:	f7fe ffbf 	bl	8000ff4 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7fe ffbb 	bl	8000ff4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e099      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002098:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <HAL_RCC_OscConfig+0x788>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020a8:	3a01      	subs	r2, #1
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	4311      	orrs	r1, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	4311      	orrs	r1, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020ba:	0852      	lsrs	r2, r2, #1
 80020bc:	3a01      	subs	r2, #1
 80020be:	0552      	lsls	r2, r2, #21
 80020c0:	4311      	orrs	r1, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020c6:	0852      	lsrs	r2, r2, #1
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0652      	lsls	r2, r2, #25
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020d2:	06d2      	lsls	r2, r2, #27
 80020d4:	430a      	orrs	r2, r1
 80020d6:	4912      	ldr	r1, [pc, #72]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 80020ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f4:	f7fe ff7e 	bl	8000ff4 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe ff7a 	bl	8000ff4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e058      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <HAL_RCC_OscConfig+0x784>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800211a:	e050      	b.n	80021be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e04f      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
 8002120:	40021000 	.word	0x40021000
 8002124:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002128:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d144      	bne.n	80021be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002134:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800214c:	f7fe ff52 	bl	8000ff4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe ff4e 	bl	8000ff4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e02c      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x7b8>
 8002172:	e024      	b.n	80021be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d01f      	beq.n	80021ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ff35 	bl	8000ff4 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe ff31 	bl	8000ff4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4905      	ldr	r1, [pc, #20]	@ (80021c8 <HAL_RCC_OscConfig+0x82c>)
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCC_OscConfig+0x830>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
 80021b8:	e001      	b.n	80021be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	feeefffc 	.word	0xfeeefffc

080021d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e11d      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b90      	ldr	r3, [pc, #576]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b8d      	ldr	r3, [pc, #564]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 020f 	bic.w	r2, r3, #15
 80021fe:	498b      	ldr	r1, [pc, #556]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b89      	ldr	r3, [pc, #548]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e105      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b81      	ldr	r3, [pc, #516]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002230:	429a      	cmp	r2, r3
 8002232:	d908      	bls.n	8002246 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b7e      	ldr	r3, [pc, #504]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	497b      	ldr	r1, [pc, #492]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d079      	beq.n	8002346 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d11e      	bne.n	8002298 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	4b75      	ldr	r3, [pc, #468]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0dc      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800226a:	f000 fa3b 	bl	80026e4 <RCC_GetSysClockFreqFromPLLSource>
 800226e:	4603      	mov	r3, r0
 8002270:	4a70      	ldr	r2, [pc, #448]	@ (8002434 <HAL_RCC_ClockConfig+0x264>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d946      	bls.n	8002304 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002276:	4b6e      	ldr	r3, [pc, #440]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d140      	bne.n	8002304 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002282:	4b6b      	ldr	r3, [pc, #428]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800228a:	4a69      	ldr	r2, [pc, #420]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 800228c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002290:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e035      	b.n	8002304 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a0:	4b63      	ldr	r3, [pc, #396]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d115      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b9      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b8:	4b5d      	ldr	r3, [pc, #372]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0ad      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c8:	4b59      	ldr	r3, [pc, #356]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0a5      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80022d8:	f000 f8b4 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a55      	ldr	r2, [pc, #340]	@ (8002434 <HAL_RCC_ClockConfig+0x264>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d90f      	bls.n	8002304 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022e4:	4b52      	ldr	r3, [pc, #328]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80022fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 0203 	bic.w	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4947      	ldr	r1, [pc, #284]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002316:	f7fe fe6d 	bl	8000ff4 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	e00a      	b.n	8002334 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7fe fe69 	bl	8000ff4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e077      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002334:	4b3e      	ldr	r3, [pc, #248]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 020c 	and.w	r2, r3, #12
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	429a      	cmp	r2, r3
 8002344:	d1eb      	bne.n	800231e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b80      	cmp	r3, #128	@ 0x80
 800234a:	d105      	bne.n	8002358 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800234c:	4b38      	ldr	r3, [pc, #224]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002356:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	429a      	cmp	r2, r3
 8002372:	d208      	bcs.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b2e      	ldr	r3, [pc, #184]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	492b      	ldr	r1, [pc, #172]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d210      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 020f 	bic.w	r2, r3, #15
 800239c:	4923      	ldr	r1, [pc, #140]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_ClockConfig+0x25c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e036      	b.n	8002424 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4918      	ldr	r1, [pc, #96]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4910      	ldr	r1, [pc, #64]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f4:	f000 f826 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	490c      	ldr	r1, [pc, #48]	@ (8002438 <HAL_RCC_ClockConfig+0x268>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_RCC_ClockConfig+0x26c>)
 8002412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_RCC_ClockConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fc4b 	bl	8000cb4 <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

  return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	04c4b400 	.word	0x04c4b400
 8002438:	08007eac 	.word	0x08007eac
 800243c:	20040000 	.word	0x20040000
 8002440:	20040004 	.word	0x20040004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b3e      	ldr	r3, [pc, #248]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002484:	4b31      	ldr	r3, [pc, #196]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002494:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024bc:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d134      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0xa6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0xac>
 80024e8:	e005      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ec:	617b      	str	r3, [r7, #20]
      break;
 80024ee:	e005      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f2:	617b      	str	r3, [r7, #20]
      break;
 80024f4:	e002      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	617b      	str	r3, [r7, #20]
      break;
 80024fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fc:	4b13      	ldr	r3, [pc, #76]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0e5b      	lsrs	r3, r3, #25
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	3301      	adds	r3, #1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253c:	69bb      	ldr	r3, [r7, #24]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	08007ec4 	.word	0x08007ec4
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20040000 	.word	0x20040000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	@ (800259c <HAL_RCC_GetPCLK1Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08007ebc 	.word	0x08007ebc

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a4:	f7ff ffda 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08007ebc 	.word	0x08007ebc

080025cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	220f      	movs	r2, #15
 80025da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800260e:	4b07      	ldr	r3, [pc, #28]	@ (800262c <HAL_RCC_GetClockConfig+0x60>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40022000 	.word	0x40022000

08002630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800263c:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002648:	f7ff f8c4 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 800264c:	6178      	str	r0, [r7, #20]
 800264e:	e014      	b.n	800267a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	@ 0x58
 800265c:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002668:	f7ff f8b4 	bl	80017d4 <HAL_PWREx_GetVoltageRange>
 800266c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	4a1a      	ldr	r2, [pc, #104]	@ (80026dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002678:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002680:	d10b      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b80      	cmp	r3, #128	@ 0x80
 8002686:	d913      	bls.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2ba0      	cmp	r3, #160	@ 0xa0
 800268c:	d902      	bls.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800268e:	2302      	movs	r3, #2
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e00d      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002694:	2301      	movs	r3, #1
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e00a      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b7f      	cmp	r3, #127	@ 0x7f
 800269e:	d902      	bls.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80026a0:	2302      	movs	r3, #2
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e004      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b70      	cmp	r3, #112	@ 0x70
 80026aa:	d101      	bne.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ac:	2301      	movs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 020f 	bic.w	r2, r3, #15
 80026b8:	4909      	ldr	r1, [pc, #36]	@ (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026c0:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40022000 	.word	0x40022000

080026e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ea:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d00b      	beq.n	8002712 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d825      	bhi.n	800274c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d008      	beq.n	8002718 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d11f      	bne.n	800274c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800270c:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800270e:	613b      	str	r3, [r7, #16]
    break;
 8002710:	e01f      	b.n	8002752 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002712:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002714:	613b      	str	r3, [r7, #16]
    break;
 8002716:	e01c      	b.n	8002752 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002724:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e005      	b.n	8002740 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002740:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	613b      	str	r3, [r7, #16]
    break;
 800274a:	e002      	b.n	8002752 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
    break;
 8002750:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002752:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	3301      	adds	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	fb03 f202 	mul.w	r2, r3, r2
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0e5b      	lsrs	r3, r3, #25
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002792:	683b      	ldr	r3, [r7, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	007a1200 	.word	0x007a1200
 80027ac:	08007ec4 	.word	0x08007ec4

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b8:	2300      	movs	r3, #0
 80027ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027bc:	2300      	movs	r3, #0
 80027be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d040      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d0:	2b80      	cmp	r3, #128	@ 0x80
 80027d2:	d02a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027d4:	2b80      	cmp	r3, #128	@ 0x80
 80027d6:	d825      	bhi.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027d8:	2b60      	cmp	r3, #96	@ 0x60
 80027da:	d026      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027dc:	2b60      	cmp	r3, #96	@ 0x60
 80027de:	d821      	bhi.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027e0:	2b40      	cmp	r3, #64	@ 0x40
 80027e2:	d006      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d81d      	bhi.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d010      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80027f0:	e018      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f2:	4b89      	ldr	r3, [pc, #548]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a88      	ldr	r2, [pc, #544]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027fe:	e015      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fb02 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002810:	e00c      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3320      	adds	r3, #32
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fbed 	bl	8002ff8 <RCCEx_PLLSAI2_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002822:	e003      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	74fb      	strb	r3, [r7, #19]
      break;
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800282a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002832:	4b79      	ldr	r3, [pc, #484]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002838:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002840:	4975      	ldr	r1, [pc, #468]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002848:	e001      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d047      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002862:	d030      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002868:	d82a      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800286a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800286e:	d02a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002874:	d824      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287a:	d008      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800287c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002880:	d81e      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288a:	d010      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800288c:	e018      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800288e:	4b62      	ldr	r3, [pc, #392]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a61      	ldr	r2, [pc, #388]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800289a:	e015      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fab4 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ac:	e00c      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3320      	adds	r3, #32
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fb9f 	bl	8002ff8 <RCCEx_PLLSAI2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028be:	e003      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	74fb      	strb	r3, [r7, #19]
      break;
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80028c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028ce:	4b52      	ldr	r3, [pc, #328]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	494e      	ldr	r1, [pc, #312]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80028e4:	e001      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 809f 	beq.w	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f8:	2300      	movs	r3, #0
 80028fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028fc:	4b46      	ldr	r3, [pc, #280]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b41      	ldr	r3, [pc, #260]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002916:	4a40      	ldr	r2, [pc, #256]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291c:	6593      	str	r3, [r2, #88]	@ 0x58
 800291e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292a:	2301      	movs	r3, #1
 800292c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3a      	ldr	r2, [pc, #232]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800293a:	f7fe fb5b 	bl	8000ff4 <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002940:	e009      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fb57 	bl	8000ff4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d902      	bls.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	74fb      	strb	r3, [r7, #19]
        break;
 8002954:	e005      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ef      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d15b      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002968:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002972:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01f      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	429a      	cmp	r2, r3
 8002984:	d019      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002990:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002992:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029b2:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d016      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fb16 	bl	8000ff4 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	e00b      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fb12 	bl	8000ff4 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d902      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	74fb      	strb	r3, [r7, #19]
            break;
 80029e2:	e006      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0ec      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f8:	4b07      	ldr	r3, [pc, #28]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	4903      	ldr	r1, [pc, #12]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a10:	e008      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	74bb      	strb	r3, [r7, #18]
 8002a16:	e005      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a24:	7c7b      	ldrb	r3, [r7, #17]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	4a9f      	ldr	r2, [pc, #636]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a42:	4b9a      	ldr	r3, [pc, #616]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a48:	f023 0203 	bic.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	4996      	ldr	r1, [pc, #600]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a64:	4b91      	ldr	r3, [pc, #580]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f023 020c 	bic.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	498e      	ldr	r1, [pc, #568]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a86:	4b89      	ldr	r3, [pc, #548]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	4985      	ldr	r1, [pc, #532]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aa8:	4b80      	ldr	r3, [pc, #512]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab6:	497d      	ldr	r1, [pc, #500]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aca:	4b78      	ldr	r3, [pc, #480]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	4974      	ldr	r1, [pc, #464]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aec:	4b6f      	ldr	r3, [pc, #444]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afa:	496c      	ldr	r1, [pc, #432]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b0e:	4b67      	ldr	r3, [pc, #412]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b1c:	4963      	ldr	r1, [pc, #396]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b30:	4b5e      	ldr	r3, [pc, #376]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b3e:	495b      	ldr	r1, [pc, #364]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b52:	4b56      	ldr	r3, [pc, #344]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	4952      	ldr	r1, [pc, #328]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b74:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	494a      	ldr	r1, [pc, #296]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b96:	4b45      	ldr	r3, [pc, #276]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	4941      	ldr	r1, [pc, #260]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	4939      	ldr	r1, [pc, #228]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d028      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bda:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be8:	4930      	ldr	r1, [pc, #192]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c04:	60d3      	str	r3, [r2, #12]
 8002c06:	e011      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f8f9 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d04d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c40:	d108      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c48:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c52:	e012      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002c54:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c5a:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c60:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c72:	490e      	ldr	r1, [pc, #56]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c8e:	60d3      	str	r3, [r2, #12]
 8002c90:	e020      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c9a:	d109      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a02      	ldr	r2, [pc, #8]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca6:	60d3      	str	r3, [r2, #12]
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f8a5 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d028      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cee:	4947      	ldr	r1, [pc, #284]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d00:	4b42      	ldr	r3, [pc, #264]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a41      	ldr	r2, [pc, #260]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d0a:	60d3      	str	r3, [r2, #12]
 8002d0c:	e011      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d16:	d10c      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f876 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01e      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3e:	4b33      	ldr	r3, [pc, #204]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4e:	492f      	ldr	r1, [pc, #188]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f851 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d88:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d8e:	f023 0204 	bic.w	r2, r3, #4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d98:	491c      	ldr	r1, [pc, #112]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002db2:	f023 0218 	bic.w	r2, r3, #24
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	4913      	ldr	r1, [pc, #76]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de0:	490a      	ldr	r1, [pc, #40]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002df2:	d105      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e00:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b72      	ldr	r3, [pc, #456]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00e      	beq.n	8002e48 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d103      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d142      	bne.n	8002ec8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e03f      	b.n	8002ec8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d018      	beq.n	8002e82 <RCCEx_PLLSAI1_Config+0x72>
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d825      	bhi.n	8002ea0 <RCCEx_PLLSAI1_Config+0x90>
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <RCCEx_PLLSAI1_Config+0x4e>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d009      	beq.n	8002e70 <RCCEx_PLLSAI1_Config+0x60>
 8002e5c:	e020      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e5e:	4b62      	ldr	r3, [pc, #392]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11d      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6e:	e01a      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e70:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e80:	e013      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e82:	4b59      	ldr	r3, [pc, #356]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e8e:	4b56      	ldr	r3, [pc, #344]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e9e:	e006      	b.n	8002eae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e004      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002eae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4949      	ldr	r1, [pc, #292]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 8086 	bne.w	8002fdc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ed0:	4b45      	ldr	r3, [pc, #276]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a44      	ldr	r2, [pc, #272]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe f88a 	bl	8000ff4 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee2:	e009      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee4:	f7fe f886 	bl	8000ff4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef6:	e005      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ef      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d168      	bne.n	8002fdc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f10:	4b35      	ldr	r3, [pc, #212]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	4b35      	ldr	r3, [pc, #212]	@ (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	06d2      	lsls	r2, r2, #27
 8002f24:	4311      	orrs	r1, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6852      	ldr	r2, [r2, #4]
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	492d      	ldr	r1, [pc, #180]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	610b      	str	r3, [r1, #16]
 8002f36:	e02d      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	0211      	lsls	r1, r2, #8
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6912      	ldr	r2, [r2, #16]
 8002f50:	0852      	lsrs	r2, r2, #1
 8002f52:	3a01      	subs	r2, #1
 8002f54:	0552      	lsls	r2, r2, #21
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	430a      	orrs	r2, r1
 8002f62:	4921      	ldr	r1, [pc, #132]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	610b      	str	r3, [r1, #16]
 8002f68:	e014      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6892      	ldr	r2, [r2, #8]
 8002f76:	0211      	lsls	r1, r2, #8
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6952      	ldr	r2, [r2, #20]
 8002f7c:	0852      	lsrs	r2, r2, #1
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	0652      	lsls	r2, r2, #25
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6852      	ldr	r2, [r2, #4]
 8002f88:	3a01      	subs	r2, #1
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	4916      	ldr	r1, [pc, #88]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f94:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a13      	ldr	r2, [pc, #76]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7fe f828 	bl	8000ff4 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa6:	e009      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa8:	f7fe f824 	bl	8000ff4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	73fb      	strb	r3, [r7, #15]
          break;
 8002fba:	e005      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	07ff800f 	.word	0x07ff800f
 8002ff0:	ff9f800f 	.word	0xff9f800f
 8002ff4:	f9ff800f 	.word	0xf9ff800f

08002ff8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003006:	4b72      	ldr	r3, [pc, #456]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003012:	4b6f      	ldr	r3, [pc, #444]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d103      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
       ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d142      	bne.n	80030b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e03f      	b.n	80030b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d018      	beq.n	800306a <RCCEx_PLLSAI2_Config+0x72>
 8003038:	2b03      	cmp	r3, #3
 800303a:	d825      	bhi.n	8003088 <RCCEx_PLLSAI2_Config+0x90>
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <RCCEx_PLLSAI2_Config+0x4e>
 8003040:	2b02      	cmp	r3, #2
 8003042:	d009      	beq.n	8003058 <RCCEx_PLLSAI2_Config+0x60>
 8003044:	e020      	b.n	8003088 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003046:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003056:	e01a      	b.n	800308e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003058:	4b5d      	ldr	r3, [pc, #372]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e013      	b.n	8003092 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800306a:	4b59      	ldr	r3, [pc, #356]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003076:	4b56      	ldr	r3, [pc, #344]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003086:	e006      	b.n	8003096 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e004      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003096:	bf00      	nop
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800309e:	4b4c      	ldr	r3, [pc, #304]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4949      	ldr	r1, [pc, #292]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 8086 	bne.w	80031c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030b8:	4b45      	ldr	r3, [pc, #276]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a44      	ldr	r2, [pc, #272]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c4:	f7fd ff96 	bl	8000ff4 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ca:	e009      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030cc:	f7fd ff92 	bl	8000ff4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	73fb      	strb	r3, [r7, #15]
        break;
 80030de:	e005      	b.n	80030ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030e0:	4b3b      	ldr	r3, [pc, #236]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ef      	bne.n	80030cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d168      	bne.n	80031c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d113      	bne.n	8003120 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030f8:	4b35      	ldr	r3, [pc, #212]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	0211      	lsls	r1, r2, #8
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	06d2      	lsls	r2, r2, #27
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6852      	ldr	r2, [r2, #4]
 8003112:	3a01      	subs	r2, #1
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	430a      	orrs	r2, r1
 8003118:	492d      	ldr	r1, [pc, #180]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	614b      	str	r3, [r1, #20]
 800311e:	e02d      	b.n	800317c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d115      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003126:	4b2a      	ldr	r3, [pc, #168]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6892      	ldr	r2, [r2, #8]
 8003132:	0211      	lsls	r1, r2, #8
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6912      	ldr	r2, [r2, #16]
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	3a01      	subs	r2, #1
 800313c:	0552      	lsls	r2, r2, #21
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	3a01      	subs	r2, #1
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	430a      	orrs	r2, r1
 800314a:	4921      	ldr	r1, [pc, #132]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	614b      	str	r3, [r1, #20]
 8003150:	e014      	b.n	800317c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6892      	ldr	r2, [r2, #8]
 800315e:	0211      	lsls	r1, r2, #8
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6952      	ldr	r2, [r2, #20]
 8003164:	0852      	lsrs	r2, r2, #1
 8003166:	3a01      	subs	r2, #1
 8003168:	0652      	lsls	r2, r2, #25
 800316a:	4311      	orrs	r1, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6852      	ldr	r2, [r2, #4]
 8003170:	3a01      	subs	r2, #1
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	430a      	orrs	r2, r1
 8003176:	4916      	ldr	r1, [pc, #88]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003178:	4313      	orrs	r3, r2
 800317a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800317c:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003186:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fd ff34 	bl	8000ff4 <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003190:	f7fd ff30 	bl	8000ff4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
          break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	07ff800f 	.word	0x07ff800f
 80031d8:	ff9f800f 	.word	0xff9f800f
 80031dc:	f9ff800f 	.word	0xf9ff800f

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e049      	b.n	8003286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f841 	bl	800328e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 f9e0 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04f      	b.n	800335c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a23      	ldr	r2, [pc, #140]	@ (8003368 <HAL_TIM_Base_Start_IT+0xc4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_TIM_Base_Start_IT+0x76>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e6:	d018      	beq.n	800331a <HAL_TIM_Base_Start_IT+0x76>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <HAL_TIM_Base_Start_IT+0xc8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_TIM_Base_Start_IT+0x76>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003370 <HAL_TIM_Base_Start_IT+0xcc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_TIM_Base_Start_IT+0x76>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <HAL_TIM_Base_Start_IT+0xd0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_TIM_Base_Start_IT+0x76>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1b      	ldr	r2, [pc, #108]	@ (8003378 <HAL_TIM_Base_Start_IT+0xd4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_Base_Start_IT+0x76>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <HAL_TIM_Base_Start_IT+0xd8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d115      	bne.n	8003346 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <HAL_TIM_Base_Start_IT+0xdc>)
 8003322:	4013      	ands	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d015      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0xb4>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003332:	d011      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003344:	e008      	b.n	8003358 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e000      	b.n	800335a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40013400 	.word	0x40013400
 800337c:	40014000 	.word	0x40014000
 8003380:	00010007 	.word	0x00010007

08003384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d020      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0202 	mvn.w	r2, #2
 80033b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8e9 	bl	80035a6 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8db 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f8ec 	bl	80035ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0204 	mvn.w	r2, #4
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8c3 	bl	80035a6 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8b5 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8c6 	bl	80035ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0208 	mvn.w	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f89d 	bl	80035a6 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f88f 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8a0 	bl	80035ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2208      	movs	r2, #8
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f877 	bl	80035a6 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f869 	bl	8003592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f87a 	bl	80035ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fa70 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f913 	bl	8003744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00c      	beq.n	8003542 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f90b 	bl	8003758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00c      	beq.n	8003566 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f834 	bl	80035ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0220 	mvn.w	r2, #32
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8d3 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a46      	ldr	r2, [pc, #280]	@ (8003710 <TIM_Base_SetConfig+0x12c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003602:	d00f      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a43      	ldr	r2, [pc, #268]	@ (8003714 <TIM_Base_SetConfig+0x130>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a42      	ldr	r2, [pc, #264]	@ (8003718 <TIM_Base_SetConfig+0x134>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a41      	ldr	r2, [pc, #260]	@ (800371c <TIM_Base_SetConfig+0x138>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a40      	ldr	r2, [pc, #256]	@ (8003720 <TIM_Base_SetConfig+0x13c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a35      	ldr	r2, [pc, #212]	@ (8003710 <TIM_Base_SetConfig+0x12c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01f      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003644:	d01b      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a32      	ldr	r2, [pc, #200]	@ (8003714 <TIM_Base_SetConfig+0x130>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d017      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <TIM_Base_SetConfig+0x134>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a30      	ldr	r2, [pc, #192]	@ (800371c <TIM_Base_SetConfig+0x138>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2f      	ldr	r2, [pc, #188]	@ (8003720 <TIM_Base_SetConfig+0x13c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2e      	ldr	r2, [pc, #184]	@ (8003724 <TIM_Base_SetConfig+0x140>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2d      	ldr	r2, [pc, #180]	@ (8003728 <TIM_Base_SetConfig+0x144>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x9a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2c      	ldr	r2, [pc, #176]	@ (800372c <TIM_Base_SetConfig+0x148>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a16      	ldr	r2, [pc, #88]	@ (8003710 <TIM_Base_SetConfig+0x12c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00f      	beq.n	80036dc <TIM_Base_SetConfig+0xf8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a18      	ldr	r2, [pc, #96]	@ (8003720 <TIM_Base_SetConfig+0x13c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00b      	beq.n	80036dc <TIM_Base_SetConfig+0xf8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a17      	ldr	r2, [pc, #92]	@ (8003724 <TIM_Base_SetConfig+0x140>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_Base_SetConfig+0xf8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a16      	ldr	r2, [pc, #88]	@ (8003728 <TIM_Base_SetConfig+0x144>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0xf8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a15      	ldr	r2, [pc, #84]	@ (800372c <TIM_Base_SetConfig+0x148>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d103      	bne.n	80036e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f023 0201 	bic.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]
  }
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40013400 	.word	0x40013400
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e042      	b.n	8003804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd f95d 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	@ 0x24
 800379a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fbb2 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8b3 	bl	8003928 <UART_SetConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e01b      	b.n	8003804 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fc31 	bl	8004064 <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003822:	2b20      	cmp	r3, #32
 8003824:	d17b      	bne.n	800391e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_UART_Transmit+0x26>
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e074      	b.n	8003920 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2221      	movs	r2, #33	@ 0x21
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003846:	f7fd fbd5 	bl	8000ff4 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003864:	d108      	bne.n	8003878 <HAL_UART_Transmit+0x6c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e003      	b.n	8003880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003880:	e030      	b.n	80038e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	@ 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fc93 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e03d      	b.n	8003920 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b6:	b292      	uxth	r2, r2
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	3302      	adds	r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	e007      	b.n	80038d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1c8      	bne.n	8003882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	@ 0x40
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fc5c 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e006      	b.n	8003920 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b08c      	sub	sp, #48	@ 0x30
 800392e:	af00      	add	r7, sp, #0
 8003930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4baa      	ldr	r3, [pc, #680]	@ (8003c00 <UART_SetConfig+0x2d8>)
 8003958:	4013      	ands	r3, r2
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003960:	430b      	orrs	r3, r1
 8003962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a9f      	ldr	r2, [pc, #636]	@ (8003c04 <UART_SetConfig+0x2dc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003990:	4313      	orrs	r3, r2
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800399e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	f023 010f 	bic.w	r1, r3, #15
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a90      	ldr	r2, [pc, #576]	@ (8003c08 <UART_SetConfig+0x2e0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d125      	bne.n	8003a18 <UART_SetConfig+0xf0>
 80039cc:	4b8f      	ldr	r3, [pc, #572]	@ (8003c0c <UART_SetConfig+0x2e4>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d81a      	bhi.n	8003a10 <UART_SetConfig+0xe8>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <UART_SetConfig+0xb8>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	08003a09 	.word	0x08003a09
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f6:	e116      	b.n	8003c26 <UART_SetConfig+0x2fe>
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fe:	e112      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a00:	2304      	movs	r3, #4
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a06:	e10e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0e:	e10a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a16:	e106      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c10 <UART_SetConfig+0x2e8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d138      	bne.n	8003a94 <UART_SetConfig+0x16c>
 8003a22:	4b7a      	ldr	r3, [pc, #488]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d82d      	bhi.n	8003a8c <UART_SetConfig+0x164>
 8003a30:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x110>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a8d 	.word	0x08003a8d
 8003a44:	08003a8d 	.word	0x08003a8d
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003a8d 	.word	0x08003a8d
 8003a50:	08003a8d 	.word	0x08003a8d
 8003a54:	08003a8d 	.word	0x08003a8d
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003a8d 	.word	0x08003a8d
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a72:	e0d8      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a7a:	e0d4      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a82:	e0d0      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8a:	e0cc      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a92:	e0c8      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5e      	ldr	r2, [pc, #376]	@ (8003c14 <UART_SetConfig+0x2ec>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d125      	bne.n	8003aea <UART_SetConfig+0x1c2>
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003aa8:	2b30      	cmp	r3, #48	@ 0x30
 8003aaa:	d016      	beq.n	8003ada <UART_SetConfig+0x1b2>
 8003aac:	2b30      	cmp	r3, #48	@ 0x30
 8003aae:	d818      	bhi.n	8003ae2 <UART_SetConfig+0x1ba>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d00a      	beq.n	8003aca <UART_SetConfig+0x1a2>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d814      	bhi.n	8003ae2 <UART_SetConfig+0x1ba>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <UART_SetConfig+0x19a>
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d008      	beq.n	8003ad2 <UART_SetConfig+0x1aa>
 8003ac0:	e00f      	b.n	8003ae2 <UART_SetConfig+0x1ba>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac8:	e0ad      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003aca:	2302      	movs	r3, #2
 8003acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad0:	e0a9      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad8:	e0a5      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ada:	2308      	movs	r3, #8
 8003adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae0:	e0a1      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae8:	e09d      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <UART_SetConfig+0x2f0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d125      	bne.n	8003b40 <UART_SetConfig+0x218>
 8003af4:	4b45      	ldr	r3, [pc, #276]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b00:	d016      	beq.n	8003b30 <UART_SetConfig+0x208>
 8003b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b04:	d818      	bhi.n	8003b38 <UART_SetConfig+0x210>
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d00a      	beq.n	8003b20 <UART_SetConfig+0x1f8>
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	d814      	bhi.n	8003b38 <UART_SetConfig+0x210>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <UART_SetConfig+0x1f0>
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d008      	beq.n	8003b28 <UART_SetConfig+0x200>
 8003b16:	e00f      	b.n	8003b38 <UART_SetConfig+0x210>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	e082      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e07e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e07a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b30:	2308      	movs	r3, #8
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e076      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3e:	e072      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	@ (8003c1c <UART_SetConfig+0x2f4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d12a      	bne.n	8003ba0 <UART_SetConfig+0x278>
 8003b4a:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b58:	d01a      	beq.n	8003b90 <UART_SetConfig+0x268>
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5e:	d81b      	bhi.n	8003b98 <UART_SetConfig+0x270>
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d00c      	beq.n	8003b80 <UART_SetConfig+0x258>
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6a:	d815      	bhi.n	8003b98 <UART_SetConfig+0x270>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <UART_SetConfig+0x250>
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b74:	d008      	beq.n	8003b88 <UART_SetConfig+0x260>
 8003b76:	e00f      	b.n	8003b98 <UART_SetConfig+0x270>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	e052      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b80:	2302      	movs	r3, #2
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b86:	e04e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8e:	e04a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b90:	2308      	movs	r3, #8
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b96:	e046      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003b98:	2310      	movs	r3, #16
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	e042      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <UART_SetConfig+0x2dc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d13a      	bne.n	8003c20 <UART_SetConfig+0x2f8>
 8003baa:	4b18      	ldr	r3, [pc, #96]	@ (8003c0c <UART_SetConfig+0x2e4>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bb8:	d01a      	beq.n	8003bf0 <UART_SetConfig+0x2c8>
 8003bba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bbe:	d81b      	bhi.n	8003bf8 <UART_SetConfig+0x2d0>
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc4:	d00c      	beq.n	8003be0 <UART_SetConfig+0x2b8>
 8003bc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bca:	d815      	bhi.n	8003bf8 <UART_SetConfig+0x2d0>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <UART_SetConfig+0x2b0>
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd4:	d008      	beq.n	8003be8 <UART_SetConfig+0x2c0>
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x2d0>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	e022      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be6:	e01e      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003be8:	2304      	movs	r3, #4
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	e01a      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e016      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e012      	b.n	8003c26 <UART_SetConfig+0x2fe>
 8003c00:	cfff69f3 	.word	0xcfff69f3
 8003c04:	40008000 	.word	0x40008000
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40004400 	.word	0x40004400
 8003c14:	40004800 	.word	0x40004800
 8003c18:	40004c00 	.word	0x40004c00
 8003c1c:	40005000 	.word	0x40005000
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4aae      	ldr	r2, [pc, #696]	@ (8003ee4 <UART_SetConfig+0x5bc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	f040 8097 	bne.w	8003d60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d823      	bhi.n	8003c82 <UART_SetConfig+0x35a>
 8003c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <UART_SetConfig+0x318>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c73 	.word	0x08003c73
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c83 	.word	0x08003c83
 8003c60:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe fc86 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c6a:	e010      	b.n	8003c8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b9e      	ldr	r3, [pc, #632]	@ (8003ee8 <UART_SetConfig+0x5c0>)
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c70:	e00d      	b.n	8003c8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe fbe7 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003c76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c78:	e009      	b.n	8003c8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c80:	e005      	b.n	8003c8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8130 	beq.w	8003ef6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	4a94      	ldr	r2, [pc, #592]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d305      	bcc.n	8003cc6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d903      	bls.n	8003cce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ccc:	e113      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	60fa      	str	r2, [r7, #12]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	4a84      	ldr	r2, [pc, #528]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cf0:	f7fc fa86 	bl	8000200 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	020b      	lsls	r3, r1, #8
 8003d06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d0a:	0202      	lsls	r2, r0, #8
 8003d0c:	6979      	ldr	r1, [r7, #20]
 8003d0e:	6849      	ldr	r1, [r1, #4]
 8003d10:	0849      	lsrs	r1, r1, #1
 8003d12:	2000      	movs	r0, #0
 8003d14:	460c      	mov	r4, r1
 8003d16:	4605      	mov	r5, r0
 8003d18:	eb12 0804 	adds.w	r8, r2, r4
 8003d1c:	eb43 0905 	adc.w	r9, r3, r5
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	469a      	mov	sl, r3
 8003d28:	4693      	mov	fp, r2
 8003d2a:	4652      	mov	r2, sl
 8003d2c:	465b      	mov	r3, fp
 8003d2e:	4640      	mov	r0, r8
 8003d30:	4649      	mov	r1, r9
 8003d32:	f7fc fa65 	bl	8000200 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d44:	d308      	bcc.n	8003d58 <UART_SetConfig+0x430>
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d4c:	d204      	bcs.n	8003d58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	e0ce      	b.n	8003ef6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d5e:	e0ca      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	d166      	bne.n	8003e38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d827      	bhi.n	8003dc2 <UART_SetConfig+0x49a>
 8003d72:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <UART_SetConfig+0x450>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dc3 	.word	0x08003dc3
 8003d88:	08003db3 	.word	0x08003db3
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
 8003d98:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7fe fbea 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003da2:	e014      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7fe fbfc 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003daa:	e010      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dac:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee8 <UART_SetConfig+0x5c0>)
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003db0:	e00d      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fe fb47 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003db6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003db8:	e009      	b.n	8003dce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dc0:	e005      	b.n	8003dce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8090 	beq.w	8003ef6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	4a44      	ldr	r2, [pc, #272]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	441a      	add	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d916      	bls.n	8003e30 <UART_SetConfig+0x508>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e08:	d212      	bcs.n	8003e30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f023 030f 	bic.w	r3, r3, #15
 8003e12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	8bfb      	ldrh	r3, [r7, #30]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	8bfa      	ldrh	r2, [r7, #30]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e062      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e36:	e05e      	b.n	8003ef6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d828      	bhi.n	8003e92 <UART_SetConfig+0x56a>
 8003e40:	a201      	add	r2, pc, #4	@ (adr r2, 8003e48 <UART_SetConfig+0x520>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e83 	.word	0x08003e83
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fb82 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e72:	e014      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fb94 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8003e78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e7a:	e010      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <UART_SetConfig+0x5c0>)
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e80:	e00d      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe fadf 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003e86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e88:	e009      	b.n	8003e9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e90:	e005      	b.n	8003e9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d028      	beq.n	8003ef6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	4a10      	ldr	r2, [pc, #64]	@ (8003eec <UART_SetConfig+0x5c4>)
 8003eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d910      	bls.n	8003ef0 <UART_SetConfig+0x5c8>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d20c      	bcs.n	8003ef0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e009      	b.n	8003ef6 <UART_SetConfig+0x5ce>
 8003ee2:	bf00      	nop
 8003ee4:	40008000 	.word	0x40008000
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	08007ef4 	.word	0x08007ef4
      }
      else
      {
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3730      	adds	r7, #48	@ 0x30
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800401e:	d10a      	bne.n	8004036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b098      	sub	sp, #96	@ 0x60
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004074:	f7fc ffbe 	bl	8000ff4 <HAL_GetTick>
 8004078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d12f      	bne.n	80040e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f88e 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d022      	beq.n	80040e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e063      	b.n	80041b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d149      	bne.n	800418a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fe:	2200      	movs	r2, #0
 8004100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f857 	bl	80041b8 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d03c      	beq.n	800418a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	623b      	str	r3, [r7, #32]
   return(result);
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	60fb      	str	r3, [r7, #12]
   return(result);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004162:	61fa      	str	r2, [r7, #28]
 8004164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	617b      	str	r3, [r7, #20]
   return(result);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e012      	b.n	80041b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3758      	adds	r7, #88	@ 0x58
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c8:	e04f      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d04b      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fc ff0f 	bl	8000ff4 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e04e      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d037      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d034      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d031      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d110      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2208      	movs	r2, #8
 800421a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f838 	bl	8004292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2208      	movs	r2, #8
 8004226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e029      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004244:	d111      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800424e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f81e 	bl	8004292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e00f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d0a0      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004292:	b480      	push	{r7}
 8004294:	b095      	sub	sp, #84	@ 0x54
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e6      	bne.n	800429a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	61fb      	str	r3, [r7, #28]
   return(result);
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e3      	bne.n	80042cc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d118      	bne.n	800433e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	60bb      	str	r3, [r7, #8]
   return(result);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	613b      	str	r3, [r7, #16]
   return(result);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e6      	bne.n	800430c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004352:	bf00      	nop
 8004354:	3754      	adds	r7, #84	@ 0x54
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_UARTEx_DisableFifoMode+0x16>
 8004370:	2302      	movs	r3, #2
 8004372:	e027      	b.n	80043c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	@ 0x24
 8004380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80043a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e02d      	b.n	8004444 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	@ 0x24
 80043f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f84f 	bl	80044c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e02d      	b.n	80044c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f811 	bl	80044c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d108      	bne.n	80044ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044e8:	e031      	b.n	800454e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ea:	2308      	movs	r3, #8
 80044ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044ee:	2308      	movs	r3, #8
 80044f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0e5b      	lsrs	r3, r3, #25
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	0f5b      	lsrs	r3, r3, #29
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004512:	7bbb      	ldrb	r3, [r7, #14]
 8004514:	7b3a      	ldrb	r2, [r7, #12]
 8004516:	4911      	ldr	r1, [pc, #68]	@ (800455c <UARTEx_SetNbDataToProcess+0x94>)
 8004518:	5c8a      	ldrb	r2, [r1, r2]
 800451a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800451e:	7b3a      	ldrb	r2, [r7, #12]
 8004520:	490f      	ldr	r1, [pc, #60]	@ (8004560 <UARTEx_SetNbDataToProcess+0x98>)
 8004522:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004524:	fb93 f3f2 	sdiv	r3, r3, r2
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	7b7a      	ldrb	r2, [r7, #13]
 8004534:	4909      	ldr	r1, [pc, #36]	@ (800455c <UARTEx_SetNbDataToProcess+0x94>)
 8004536:	5c8a      	ldrb	r2, [r1, r2]
 8004538:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800453c:	7b7a      	ldrb	r2, [r7, #13]
 800453e:	4908      	ldr	r1, [pc, #32]	@ (8004560 <UARTEx_SetNbDataToProcess+0x98>)
 8004540:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004542:	fb93 f3f2 	sdiv	r3, r3, r2
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	08007f0c 	.word	0x08007f0c
 8004560:	08007f14 	.word	0x08007f14

08004564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004564:	b084      	sub	sp, #16
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	f107 001c 	add.w	r0, r7, #28
 8004572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa68 	bl	8004a58 <USB_CoreReset>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800458c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	@ 0x38
 80045a0:	e005      	b.n	80045ae <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ba:	b004      	add	sp, #16
 80045bc:	4770      	bx	lr

080045be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d115      	bne.n	800462e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800460e:	200a      	movs	r0, #10
 8004610:	f7fc fcfc 	bl	800100c <HAL_Delay>
      ms += 10U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	330a      	adds	r3, #10
 8004618:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa0e 	bl	8004a3c <USB_GetMode>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d01e      	beq.n	8004664 <USB_SetCurrentMode+0x84>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2bc7      	cmp	r3, #199	@ 0xc7
 800462a:	d9f0      	bls.n	800460e <USB_SetCurrentMode+0x2e>
 800462c:	e01a      	b.n	8004664 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d115      	bne.n	8004660 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004640:	200a      	movs	r0, #10
 8004642:	f7fc fce3 	bl	800100c <HAL_Delay>
      ms += 10U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	330a      	adds	r3, #10
 800464a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f9f5 	bl	8004a3c <USB_GetMode>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <USB_SetCurrentMode+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2bc7      	cmp	r3, #199	@ 0xc7
 800465c:	d9f0      	bls.n	8004640 <USB_SetCurrentMode+0x60>
 800465e:	e001      	b.n	8004664 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e005      	b.n	8004670 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2bc8      	cmp	r3, #200	@ 0xc8
 8004668:	d101      	bne.n	800466e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004678:	b084      	sub	sp, #16
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e009      	b.n	80046ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3340      	adds	r3, #64	@ 0x40
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3301      	adds	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b0e      	cmp	r3, #14
 80046b0:	d9f2      	bls.n	8004698 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11c      	bne.n	80046f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e005      	b.n	8004700 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800470c:	2103      	movs	r1, #3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f95a 	bl	80049c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004714:	2110      	movs	r1, #16
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8f6 	bl	8004908 <USB_FlushTxFifo>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f920 	bl	800496c <USB_FlushRxFifo>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004748:	461a      	mov	r2, r3
 800474a:	2300      	movs	r3, #0
 800474c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e043      	b.n	80047e8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004772:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004776:	d118      	bne.n	80047aa <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478a:	461a      	mov	r2, r3
 800478c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e013      	b.n	80047bc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e008      	b.n	80047bc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047da:	461a      	mov	r2, r3
 80047dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3301      	adds	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ec:	461a      	mov	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d3b5      	bcc.n	8004760 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	e043      	b.n	8004882 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800480c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004810:	d118      	bne.n	8004844 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004824:	461a      	mov	r2, r3
 8004826:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e013      	b.n	8004856 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e008      	b.n	8004856 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004874:	461a      	mov	r2, r3
 8004876:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800487a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3301      	adds	r3, #1
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004886:	461a      	mov	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4293      	cmp	r3, r2
 800488c:	d3b5      	bcc.n	80047fa <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800489c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <USB_DevInit+0x28c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f043 0208 	orr.w	r2, r3, #8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004900:	b004      	add	sp, #16
 8004902:	4770      	bx	lr
 8004904:	803c3800 	.word	0x803c3800

08004908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004922:	d901      	bls.n	8004928 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e01b      	b.n	8004960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	daf2      	bge.n	8004916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	019b      	lsls	r3, r3, #6
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494c:	d901      	bls.n	8004952 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e006      	b.n	8004960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	d0f0      	beq.n	8004940 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004984:	d901      	bls.n	800498a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e018      	b.n	80049bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	daf2      	bge.n	8004978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2210      	movs	r2, #16
 800499a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049a8:	d901      	bls.n	80049ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e006      	b.n	80049bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d0f0      	beq.n	800499c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a14:	f023 0303 	bic.w	r3, r3, #3
 8004a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0301 	and.w	r3, r3, #1
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a70:	d901      	bls.n	8004a76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e01b      	b.n	8004aae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	daf2      	bge.n	8004a64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f043 0201 	orr.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a9a:	d901      	bls.n	8004aa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e006      	b.n	8004aae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d0f0      	beq.n	8004a8e <USB_CoreReset+0x36>

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <SysTick_Handler+0x1c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ac4:	f001 fc7e 	bl	80063c4 <xTaskGetSchedulerState>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d001      	beq.n	8004ad2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ace:	f002 fa73 	bl	8006fb8 <xPortSysTickHandler>
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	e000e010 	.word	0xe000e010

08004adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a07      	ldr	r2, [pc, #28]	@ (8004b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a06      	ldr	r2, [pc, #24]	@ (8004b0c <vApplicationGetIdleTaskMemory+0x30>)
 8004af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2280      	movs	r2, #128	@ 0x80
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20040700 	.word	0x20040700
 8004b0c:	2004075c 	.word	0x2004075c

08004b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a07      	ldr	r2, [pc, #28]	@ (8004b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a06      	ldr	r2, [pc, #24]	@ (8004b40 <vApplicationGetTimerTaskMemory+0x30>)
 8004b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2004095c 	.word	0x2004095c
 8004b40:	200409b8 	.word	0x200409b8

08004b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f103 0208 	add.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 0208 	add.w	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f103 0208 	add.w	r2, r3, #8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e00c      	b.n	8004c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e002      	b.n	8004c14 <vListInsert+0x2e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d2f6      	bcs.n	8004c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6892      	ldr	r2, [r2, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d103      	bne.n	8004c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cd8:	f002 f8de 	bl	8006e98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce4:	68f9      	ldr	r1, [r7, #12]
 8004ce6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	22ff      	movs	r2, #255	@ 0xff
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	22ff      	movs	r2, #255	@ 0xff
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d114      	bne.n	8004d58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01a      	beq.n	8004d6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3310      	adds	r3, #16
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f982 	bl	8006044 <xTaskRemoveFromEventList>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d46:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <xQueueGenericReset+0xd0>)
 8004d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	e009      	b.n	8004d6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3310      	adds	r3, #16
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fef1 	bl	8004b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3324      	adds	r3, #36	@ 0x24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff feec 	bl	8004b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d6c:	f002 f8c6 	bl	8006efc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	@ 0x38
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <xQueueGenericCreateStatic+0x56>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <xQueueGenericCreateStatic+0x5a>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xQueueGenericCreateStatic+0x5c>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	623b      	str	r3, [r7, #32]
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <xQueueGenericCreateStatic+0x84>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <xQueueGenericCreateStatic+0x88>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <xQueueGenericCreateStatic+0x8a>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61fb      	str	r3, [r7, #28]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e26:	2350      	movs	r3, #80	@ 0x50
 8004e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b50      	cmp	r3, #80	@ 0x50
 8004e2e:	d00b      	beq.n	8004e48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	61bb      	str	r3, [r7, #24]
}
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	e7fd      	b.n	8004e44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f805 	bl	8004e7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3730      	adds	r7, #48	@ 0x30
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	69b8      	ldr	r0, [r7, #24]
 8004eac:	f7ff fefe 	bl	8004cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08e      	sub	sp, #56	@ 0x38
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericSend+0x34>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSend+0x42>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSend+0x46>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSend+0x48>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <xQueueGenericSend+0x64>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x72>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <xQueueGenericSend+0x76>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericSend+0x78>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xQueueGenericSend+0x94>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f54:	f001 fa36 	bl	80063c4 <xTaskGetSchedulerState>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <xQueueGenericSend+0xa4>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <xQueueGenericSend+0xa8>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <xQueueGenericSend+0xaa>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <xQueueGenericSend+0xc6>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	61fb      	str	r3, [r7, #28]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f86:	f001 ff87 	bl	8006e98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <xQueueGenericSend+0xdc>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d129      	bne.n	8004ff0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fa2:	f000 fa0f 	bl	80053c4 <prvCopyDataToQueue>
 8004fa6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d010      	beq.n	8004fd2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	3324      	adds	r3, #36	@ 0x24
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f001 f845 	bl	8006044 <xTaskRemoveFromEventList>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80050c0 <xQueueGenericSend+0x200>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	e00a      	b.n	8004fe8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fd8:	4b39      	ldr	r3, [pc, #228]	@ (80050c0 <xQueueGenericSend+0x200>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fe8:	f001 ff88 	bl	8006efc <vPortExitCritical>
				return pdPASS;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e063      	b.n	80050b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff6:	f001 ff81 	bl	8006efc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e05c      	b.n	80050b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4618      	mov	r0, r3
 800500a:	f001 f87f 	bl	800610c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800500e:	2301      	movs	r3, #1
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005012:	f001 ff73 	bl	8006efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005016:	f000 fdef 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800501a:	f001 ff3d 	bl	8006e98 <vPortEnterCritical>
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005024:	b25b      	sxtb	r3, r3
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d103      	bne.n	8005034 <xQueueGenericSend+0x174>
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800503a:	b25b      	sxtb	r3, r3
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d103      	bne.n	800504a <xQueueGenericSend+0x18a>
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800504a:	f001 ff57 	bl	8006efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800504e:	1d3a      	adds	r2, r7, #4
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f86e 	bl	8006138 <xTaskCheckForTimeOut>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d124      	bne.n	80050ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005062:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005064:	f000 faa6 	bl	80055b4 <prvIsQueueFull>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	3310      	adds	r3, #16
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f000 ff92 	bl	8005fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800507c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800507e:	f000 fa31 	bl	80054e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005082:	f000 fdc7 	bl	8005c14 <xTaskResumeAll>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f af7c 	bne.w	8004f86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800508e:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <xQueueGenericSend+0x200>)
 8005090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	e772      	b.n	8004f86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050a2:	f000 fa1f 	bl	80054e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a6:	f000 fdb5 	bl	8005c14 <xTaskResumeAll>
 80050aa:	e76c      	b.n	8004f86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ae:	f000 fa19 	bl	80054e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050b2:	f000 fdaf 	bl	8005c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3738      	adds	r7, #56	@ 0x38
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b090      	sub	sp, #64	@ 0x40
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <xQueueGenericSendFromISR+0x3e>
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <xQueueGenericSendFromISR+0x42>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueGenericSendFromISR+0x44>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d103      	bne.n	8005132 <xQueueGenericSendFromISR+0x6e>
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <xQueueGenericSendFromISR+0x72>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <xQueueGenericSendFromISR+0x74>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	623b      	str	r3, [r7, #32]
}
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	e7fd      	b.n	8005150 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005154:	f001 ff80 	bl	8007058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005158:	f3ef 8211 	mrs	r2, BASEPRI
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005170:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <xQueueGenericSendFromISR+0xc2>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d12f      	bne.n	80051e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800518c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800519c:	f000 f912 	bl	80053c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d112      	bne.n	80051d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	3324      	adds	r3, #36	@ 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff44 	bl	8006044 <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e007      	b.n	80051e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80051d4:	3301      	adds	r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	b25a      	sxtb	r2, r3
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051e0:	2301      	movs	r3, #1
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80051e4:	e001      	b.n	80051ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3740      	adds	r7, #64	@ 0x40
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <xQueueReceive+0x32>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	623b      	str	r3, [r7, #32]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <xQueueReceive+0x40>
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <xQueueReceive+0x44>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <xQueueReceive+0x46>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <xQueueReceive+0x62>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	61fb      	str	r3, [r7, #28]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005262:	f001 f8af 	bl	80063c4 <xTaskGetSchedulerState>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <xQueueReceive+0x72>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <xQueueReceive+0x76>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <xQueueReceive+0x78>
 8005276:	2300      	movs	r3, #0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xQueueReceive+0x94>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	61bb      	str	r3, [r7, #24]
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005294:	f001 fe00 	bl	8006e98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01f      	beq.n	80052e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a8:	f000 f8f6 	bl	8005498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	1e5a      	subs	r2, r3, #1
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00f      	beq.n	80052dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	3310      	adds	r3, #16
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 febf 	bl	8006044 <xTaskRemoveFromEventList>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052cc:	4b3c      	ldr	r3, [pc, #240]	@ (80053c0 <xQueueReceive+0x1c0>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052dc:	f001 fe0e 	bl	8006efc <vPortExitCritical>
				return pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e069      	b.n	80053b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ea:	f001 fe07 	bl	8006efc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e062      	b.n	80053b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f8:	f107 0310 	add.w	r3, r7, #16
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 ff05 	bl	800610c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005302:	2301      	movs	r3, #1
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005306:	f001 fdf9 	bl	8006efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800530a:	f000 fc75 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800530e:	f001 fdc3 	bl	8006e98 <vPortEnterCritical>
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005318:	b25b      	sxtb	r3, r3
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d103      	bne.n	8005328 <xQueueReceive+0x128>
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d103      	bne.n	800533e <xQueueReceive+0x13e>
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533e:	f001 fddd 	bl	8006efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005342:	1d3a      	adds	r2, r7, #4
 8005344:	f107 0310 	add.w	r3, r7, #16
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fef4 	bl	8006138 <xTaskCheckForTimeOut>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d123      	bne.n	800539e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005358:	f000 f916 	bl	8005588 <prvIsQueueEmpty>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d017      	beq.n	8005392 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	3324      	adds	r3, #36	@ 0x24
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fe18 	bl	8005fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005372:	f000 f8b7 	bl	80054e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005376:	f000 fc4d 	bl	8005c14 <xTaskResumeAll>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d189      	bne.n	8005294 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005380:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <xQueueReceive+0x1c0>)
 8005382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	e780      	b.n	8005294 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005394:	f000 f8a6 	bl	80054e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005398:	f000 fc3c 	bl	8005c14 <xTaskResumeAll>
 800539c:	e77a      	b.n	8005294 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800539e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a0:	f000 f8a0 	bl	80054e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053a4:	f000 fc36 	bl	8005c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053aa:	f000 f8ed 	bl	8005588 <prvIsQueueEmpty>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f43f af6f 	beq.w	8005294 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3730      	adds	r7, #48	@ 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10d      	bne.n	80053fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d14d      	bne.n	8005486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 f806 	bl	8006400 <xTaskPriorityDisinherit>
 80053f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	e043      	b.n	8005486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d119      	bne.n	8005438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6858      	ldr	r0, [r3, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	461a      	mov	r2, r3
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	f002 fac5 	bl	800799e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	441a      	add	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	d32b      	bcc.n	8005486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e026      	b.n	8005486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68d8      	ldr	r0, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	461a      	mov	r2, r3
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	f002 faab 	bl	800799e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	425b      	negs	r3, r3
 8005452:	441a      	add	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d207      	bcs.n	8005474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	425b      	negs	r3, r3
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d105      	bne.n	8005486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	3b01      	subs	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800548e:	697b      	ldr	r3, [r7, #20]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d018      	beq.n	80054dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	441a      	add	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d303      	bcc.n	80054cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68d9      	ldr	r1, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d4:	461a      	mov	r2, r3
 80054d6:	6838      	ldr	r0, [r7, #0]
 80054d8:	f002 fa61 	bl	800799e <memcpy>
	}
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054ec:	f001 fcd4 	bl	8006e98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f8:	e011      	b.n	800551e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d012      	beq.n	8005528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3324      	adds	r3, #36	@ 0x24
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fd9c 	bl	8006044 <xTaskRemoveFromEventList>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005512:	f000 fe75 	bl	8006200 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	3b01      	subs	r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800551e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	dce9      	bgt.n	80054fa <prvUnlockQueue+0x16>
 8005526:	e000      	b.n	800552a <prvUnlockQueue+0x46>
					break;
 8005528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	22ff      	movs	r2, #255	@ 0xff
 800552e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005532:	f001 fce3 	bl	8006efc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005536:	f001 fcaf 	bl	8006e98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005542:	e011      	b.n	8005568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d012      	beq.n	8005572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3310      	adds	r3, #16
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fd77 	bl	8006044 <xTaskRemoveFromEventList>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800555c:	f000 fe50 	bl	8006200 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	3b01      	subs	r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dce9      	bgt.n	8005544 <prvUnlockQueue+0x60>
 8005570:	e000      	b.n	8005574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	22ff      	movs	r2, #255	@ 0xff
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800557c:	f001 fcbe 	bl	8006efc <vPortExitCritical>
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005590:	f001 fc82 	bl	8006e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e001      	b.n	80055a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055a6:	f001 fca9 	bl	8006efc <vPortExitCritical>

	return xReturn;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055bc:	f001 fc6c 	bl	8006e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d102      	bne.n	80055d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e001      	b.n	80055d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055d6:	f001 fc91 	bl	8006efc <vPortExitCritical>

	return xReturn;
 80055da:	68fb      	ldr	r3, [r7, #12]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e014      	b.n	800561e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005634 <vQueueAddToRegistry+0x50>)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005600:	490c      	ldr	r1, [pc, #48]	@ (8005634 <vQueueAddToRegistry+0x50>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <vQueueAddToRegistry+0x50>)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005616:	e006      	b.n	8005626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b07      	cmp	r3, #7
 8005622:	d9e7      	bls.n	80055f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20040db8 	.word	0x20040db8

08005638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005648:	f001 fc26 	bl	8006e98 <vPortEnterCritical>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005652:	b25b      	sxtb	r3, r3
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d103      	bne.n	8005662 <vQueueWaitForMessageRestricted+0x2a>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005668:	b25b      	sxtb	r3, r3
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d103      	bne.n	8005678 <vQueueWaitForMessageRestricted+0x40>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005678:	f001 fc40 	bl	8006efc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3324      	adds	r3, #36	@ 0x24
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fcad 	bl	8005fec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7ff ff26 	bl	80054e4 <prvUnlockQueue>
	}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	@ 0x38
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	623b      	str	r3, [r7, #32]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	61fb      	str	r3, [r7, #28]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056ea:	235c      	movs	r3, #92	@ 0x5c
 80056ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80056f2:	d00b      	beq.n	800570c <xTaskCreateStatic+0x6c>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	61bb      	str	r3, [r7, #24]
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800570c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <xTaskCreateStatic+0xb2>
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01b      	beq.n	8005752 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800572c:	2300      	movs	r3, #0
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	f107 0314 	add.w	r3, r7, #20
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f850 	bl	80057ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800574a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800574c:	f000 f8de 	bl	800590c <prvAddNewTaskToReadyList>
 8005750:	e001      	b.n	8005756 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005756:	697b      	ldr	r3, [r7, #20]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3728      	adds	r7, #40	@ 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	@ 0x30
 8005764:	af04      	add	r7, sp, #16
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fcb1 	bl	80070dc <pvPortMalloc>
 800577a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00e      	beq.n	80057a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005782:	205c      	movs	r0, #92	@ 0x5c
 8005784:	f001 fcaa 	bl	80070dc <pvPortMalloc>
 8005788:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	631a      	str	r2, [r3, #48]	@ 0x30
 8005796:	e005      	b.n	80057a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f001 fd6d 	bl	8007278 <vPortFree>
 800579e:	e001      	b.n	80057a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	2300      	movs	r3, #0
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f80e 	bl	80057ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ce:	69f8      	ldr	r0, [r7, #28]
 80057d0:	f000 f89c 	bl	800590c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e002      	b.n	80057e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057e0:	69bb      	ldr	r3, [r7, #24]
	}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b088      	sub	sp, #32
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	461a      	mov	r2, r3
 8005802:	21a5      	movs	r1, #165	@ 0xa5
 8005804:	f002 f850 	bl	80078a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005812:	3b01      	subs	r3, #1
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	617b      	str	r3, [r7, #20]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01f      	beq.n	800588a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e012      	b.n	8005876 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	7819      	ldrb	r1, [r3, #0]
 8005858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	3334      	adds	r3, #52	@ 0x34
 8005860:	460a      	mov	r2, r1
 8005862:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3301      	adds	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d9e9      	bls.n	8005850 <prvInitialiseNewTask+0x66>
 800587c:	e000      	b.n	8005880 <prvInitialiseNewTask+0x96>
			{
				break;
 800587e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005888:	e003      	b.n	8005892 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	2b37      	cmp	r3, #55	@ 0x37
 8005896:	d901      	bls.n	800589c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005898:	2337      	movs	r3, #55	@ 0x37
 800589a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	2200      	movs	r2, #0
 80058ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	3304      	adds	r3, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff f966 	bl	8004b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	3318      	adds	r3, #24
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff f961 	bl	8004b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	2200      	movs	r2, #0
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	69b8      	ldr	r0, [r7, #24]
 80058ec:	f001 f9a6 	bl	8006c3c <pxPortInitialiseStack>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005902:	bf00      	nop
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005914:	f001 fac0 	bl	8006e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005918:	4b2d      	ldr	r3, [pc, #180]	@ (80059d0 <prvAddNewTaskToReadyList+0xc4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	4a2c      	ldr	r2, [pc, #176]	@ (80059d0 <prvAddNewTaskToReadyList+0xc4>)
 8005920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005922:	4b2c      	ldr	r3, [pc, #176]	@ (80059d4 <prvAddNewTaskToReadyList+0xc8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800592a:	4a2a      	ldr	r2, [pc, #168]	@ (80059d4 <prvAddNewTaskToReadyList+0xc8>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005930:	4b27      	ldr	r3, [pc, #156]	@ (80059d0 <prvAddNewTaskToReadyList+0xc4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d110      	bne.n	800595a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005938:	f000 fc86 	bl	8006248 <prvInitialiseTaskLists>
 800593c:	e00d      	b.n	800595a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800593e:	4b26      	ldr	r3, [pc, #152]	@ (80059d8 <prvAddNewTaskToReadyList+0xcc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005946:	4b23      	ldr	r3, [pc, #140]	@ (80059d4 <prvAddNewTaskToReadyList+0xc8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	429a      	cmp	r2, r3
 8005952:	d802      	bhi.n	800595a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005954:	4a1f      	ldr	r2, [pc, #124]	@ (80059d4 <prvAddNewTaskToReadyList+0xc8>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800595a:	4b20      	ldr	r3, [pc, #128]	@ (80059dc <prvAddNewTaskToReadyList+0xd0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3301      	adds	r3, #1
 8005960:	4a1e      	ldr	r2, [pc, #120]	@ (80059dc <prvAddNewTaskToReadyList+0xd0>)
 8005962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005964:	4b1d      	ldr	r3, [pc, #116]	@ (80059dc <prvAddNewTaskToReadyList+0xd0>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <prvAddNewTaskToReadyList+0xd4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <prvAddNewTaskToReadyList+0x74>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	4a18      	ldr	r2, [pc, #96]	@ (80059e0 <prvAddNewTaskToReadyList+0xd4>)
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <prvAddNewTaskToReadyList+0xd8>)
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7ff f901 	bl	8004b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800599c:	f001 faae 	bl	8006efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <prvAddNewTaskToReadyList+0xcc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00e      	beq.n	80059c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a8:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <prvAddNewTaskToReadyList+0xc8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d207      	bcs.n	80059c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059b6:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <prvAddNewTaskToReadyList+0xdc>)
 80059b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200412cc 	.word	0x200412cc
 80059d4:	20040df8 	.word	0x20040df8
 80059d8:	200412d8 	.word	0x200412d8
 80059dc:	200412e8 	.word	0x200412e8
 80059e0:	200412d4 	.word	0x200412d4
 80059e4:	20040dfc 	.word	0x20040dfc
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b37      	cmp	r3, #55	@ 0x37
 80059fe:	d90b      	bls.n	8005a18 <vTaskPrioritySet+0x2c>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b37      	cmp	r3, #55	@ 0x37
 8005a1c:	d901      	bls.n	8005a22 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a1e:	2337      	movs	r3, #55	@ 0x37
 8005a20:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005a22:	f001 fa39 	bl	8006e98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <vTaskPrioritySet+0x46>
 8005a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b18 <vTaskPrioritySet+0x12c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	e000      	b.n	8005a34 <vTaskPrioritySet+0x48>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d063      	beq.n	8005b0c <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d90d      	bls.n	8005a68 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8005a4c:	4b32      	ldr	r3, [pc, #200]	@ (8005b18 <vTaskPrioritySet+0x12c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d00f      	beq.n	8005a76 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005a56:	4b30      	ldr	r3, [pc, #192]	@ (8005b18 <vTaskPrioritySet+0x12c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d309      	bcc.n	8005a76 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e006      	b.n	8005a76 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005a68:	4b2b      	ldr	r3, [pc, #172]	@ (8005b18 <vTaskPrioritySet+0x12c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d101      	bne.n	8005a76 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d102      	bne.n	8005a8e <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	db04      	blt.n	8005aa6 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	6959      	ldr	r1, [r3, #20]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <vTaskPrioritySet+0x130>)
 8005ab6:	4413      	add	r3, r2
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d11c      	bne.n	8005af6 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff f8c9 	bl	8004c58 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	4b15      	ldr	r3, [pc, #84]	@ (8005b20 <vTaskPrioritySet+0x134>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <vTaskPrioritySet+0xee>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	4a12      	ldr	r2, [pc, #72]	@ (8005b20 <vTaskPrioritySet+0x134>)
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8005b1c <vTaskPrioritySet+0x130>)
 8005ae8:	441a      	add	r2, r3
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7ff f854 	bl	8004b9e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005afc:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <vTaskPrioritySet+0x138>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005b0c:	f001 f9f6 	bl	8006efc <vPortExitCritical>
	}
 8005b10:	bf00      	nop
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20040df8 	.word	0x20040df8
 8005b1c:	20040dfc 	.word	0x20040dfc
 8005b20:	200412d4 	.word	0x200412d4
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	@ 0x28
 8005b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b36:	463a      	mov	r2, r7
 8005b38:	1d39      	adds	r1, r7, #4
 8005b3a:	f107 0308 	add.w	r3, r7, #8
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe ffcc 	bl	8004adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	9202      	str	r2, [sp, #8]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	460a      	mov	r2, r1
 8005b56:	4922      	ldr	r1, [pc, #136]	@ (8005be0 <vTaskStartScheduler+0xb8>)
 8005b58:	4822      	ldr	r0, [pc, #136]	@ (8005be4 <vTaskStartScheduler+0xbc>)
 8005b5a:	f7ff fda1 	bl	80056a0 <xTaskCreateStatic>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <vTaskStartScheduler+0xc0>)
 8005b62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b64:	4b20      	ldr	r3, [pc, #128]	@ (8005be8 <vTaskStartScheduler+0xc0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e001      	b.n	8005b76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d102      	bne.n	8005b82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b7c:	f000 fd04 	bl	8006588 <xTimerCreateTimerTask>
 8005b80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d116      	bne.n	8005bb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	613b      	str	r3, [r7, #16]
}
 8005b9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9c:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <vTaskStartScheduler+0xc4>)
 8005b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba4:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <vTaskStartScheduler+0xc8>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005baa:	4b12      	ldr	r3, [pc, #72]	@ (8005bf4 <vTaskStartScheduler+0xcc>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb0:	f001 f8ce 	bl	8006d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb4:	e00f      	b.n	8005bd6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d10b      	bne.n	8005bd6 <vTaskStartScheduler+0xae>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <vTaskStartScheduler+0xaa>
}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	08007e94 	.word	0x08007e94
 8005be4:	08006219 	.word	0x08006219
 8005be8:	200412f0 	.word	0x200412f0
 8005bec:	200412ec 	.word	0x200412ec
 8005bf0:	200412d8 	.word	0x200412d8
 8005bf4:	200412d0 	.word	0x200412d0

08005bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bfc:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <vTaskSuspendAll+0x18>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	4a03      	ldr	r2, [pc, #12]	@ (8005c10 <vTaskSuspendAll+0x18>)
 8005c04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	200412f4 	.word	0x200412f4

08005c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c22:	4b42      	ldr	r3, [pc, #264]	@ (8005d2c <xTaskResumeAll+0x118>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	603b      	str	r3, [r7, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c42:	f001 f929 	bl	8006e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c46:	4b39      	ldr	r3, [pc, #228]	@ (8005d2c <xTaskResumeAll+0x118>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a37      	ldr	r2, [pc, #220]	@ (8005d2c <xTaskResumeAll+0x118>)
 8005c4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c50:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <xTaskResumeAll+0x118>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d162      	bne.n	8005d1e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c58:	4b35      	ldr	r3, [pc, #212]	@ (8005d30 <xTaskResumeAll+0x11c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d05e      	beq.n	8005d1e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c60:	e02f      	b.n	8005cc2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c62:	4b34      	ldr	r3, [pc, #208]	@ (8005d34 <xTaskResumeAll+0x120>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3318      	adds	r3, #24
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fff2 	bl	8004c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe ffed 	bl	8004c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c82:	4b2d      	ldr	r3, [pc, #180]	@ (8005d38 <xTaskResumeAll+0x124>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d903      	bls.n	8005c92 <xTaskResumeAll+0x7e>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d38 <xTaskResumeAll+0x124>)
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a27      	ldr	r2, [pc, #156]	@ (8005d3c <xTaskResumeAll+0x128>)
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe ff78 	bl	8004b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4b23      	ldr	r3, [pc, #140]	@ (8005d40 <xTaskResumeAll+0x12c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005cbc:	4b21      	ldr	r3, [pc, #132]	@ (8005d44 <xTaskResumeAll+0x130>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d34 <xTaskResumeAll+0x120>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1cb      	bne.n	8005c62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cd0:	f000 fb58 	bl	8006384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d48 <xTaskResumeAll+0x134>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ce0:	f000 f846 	bl	8005d70 <xTaskIncrementTick>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005cea:	4b16      	ldr	r3, [pc, #88]	@ (8005d44 <xTaskResumeAll+0x130>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f1      	bne.n	8005ce0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005cfc:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <xTaskResumeAll+0x134>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <xTaskResumeAll+0x130>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <xTaskResumeAll+0x138>)
 8005d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 f8ed 	bl	8006efc <vPortExitCritical>

	return xAlreadyYielded;
 8005d22:	68bb      	ldr	r3, [r7, #8]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200412f4 	.word	0x200412f4
 8005d30:	200412cc 	.word	0x200412cc
 8005d34:	2004128c 	.word	0x2004128c
 8005d38:	200412d4 	.word	0x200412d4
 8005d3c:	20040dfc 	.word	0x20040dfc
 8005d40:	20040df8 	.word	0x20040df8
 8005d44:	200412e0 	.word	0x200412e0
 8005d48:	200412dc 	.word	0x200412dc
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d56:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <xTaskGetTickCount+0x1c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d5c:	687b      	ldr	r3, [r7, #4]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	200412d0 	.word	0x200412d0

08005d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8005eb8 <xTaskIncrementTick+0x148>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8090 	bne.w	8005ea4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d84:	4b4d      	ldr	r3, [pc, #308]	@ (8005ebc <xTaskIncrementTick+0x14c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8005ebc <xTaskIncrementTick+0x14c>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d121      	bne.n	8005ddc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d98:	4b49      	ldr	r3, [pc, #292]	@ (8005ec0 <xTaskIncrementTick+0x150>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <xTaskIncrementTick+0x4a>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	603b      	str	r3, [r7, #0]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <xTaskIncrementTick+0x46>
 8005dba:	4b41      	ldr	r3, [pc, #260]	@ (8005ec0 <xTaskIncrementTick+0x150>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	4b40      	ldr	r3, [pc, #256]	@ (8005ec4 <xTaskIncrementTick+0x154>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ec0 <xTaskIncrementTick+0x150>)
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ec4 <xTaskIncrementTick+0x154>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec8 <xTaskIncrementTick+0x158>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ec8 <xTaskIncrementTick+0x158>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	f000 fad4 	bl	8006384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ecc <xTaskIncrementTick+0x15c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d349      	bcc.n	8005e7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de6:	4b36      	ldr	r3, [pc, #216]	@ (8005ec0 <xTaskIncrementTick+0x150>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df0:	4b36      	ldr	r3, [pc, #216]	@ (8005ecc <xTaskIncrementTick+0x15c>)
 8005df2:	f04f 32ff 	mov.w	r2, #4294967295
 8005df6:	601a      	str	r2, [r3, #0]
					break;
 8005df8:	e03f      	b.n	8005e7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfa:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <xTaskIncrementTick+0x150>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d203      	bcs.n	8005e1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e12:	4a2e      	ldr	r2, [pc, #184]	@ (8005ecc <xTaskIncrementTick+0x15c>)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e18:	e02f      	b.n	8005e7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe ff1a 	bl	8004c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe ff11 	bl	8004c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3a:	4b25      	ldr	r3, [pc, #148]	@ (8005ed0 <xTaskIncrementTick+0x160>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d903      	bls.n	8005e4a <xTaskIncrementTick+0xda>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e46:	4a22      	ldr	r2, [pc, #136]	@ (8005ed0 <xTaskIncrementTick+0x160>)
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed4 <xTaskIncrementTick+0x164>)
 8005e58:	441a      	add	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7fe fe9c 	bl	8004b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <xTaskIncrementTick+0x168>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3b8      	bcc.n	8005de6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e78:	e7b5      	b.n	8005de6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ed8 <xTaskIncrementTick+0x168>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e80:	4914      	ldr	r1, [pc, #80]	@ (8005ed4 <xTaskIncrementTick+0x164>)
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d901      	bls.n	8005e96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e96:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <xTaskIncrementTick+0x16c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e004      	b.n	8005eae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <xTaskIncrementTick+0x170>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee0 <xTaskIncrementTick+0x170>)
 8005eac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200412f4 	.word	0x200412f4
 8005ebc:	200412d0 	.word	0x200412d0
 8005ec0:	20041284 	.word	0x20041284
 8005ec4:	20041288 	.word	0x20041288
 8005ec8:	200412e4 	.word	0x200412e4
 8005ecc:	200412ec 	.word	0x200412ec
 8005ed0:	200412d4 	.word	0x200412d4
 8005ed4:	20040dfc 	.word	0x20040dfc
 8005ed8:	20040df8 	.word	0x20040df8
 8005edc:	200412e0 	.word	0x200412e0
 8005ee0:	200412dc 	.word	0x200412dc

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b28      	ldr	r3, [pc, #160]	@ (8005f8c <vTaskSwitchContext+0xa8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ef2:	4b27      	ldr	r3, [pc, #156]	@ (8005f90 <vTaskSwitchContext+0xac>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef8:	e042      	b.n	8005f80 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005efa:	4b25      	ldr	r3, [pc, #148]	@ (8005f90 <vTaskSwitchContext+0xac>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b24      	ldr	r3, [pc, #144]	@ (8005f94 <vTaskSwitchContext+0xb0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e011      	b.n	8005f2c <vTaskSwitchContext+0x48>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <vTaskSwitchContext+0x42>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <vTaskSwitchContext+0x3e>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	491a      	ldr	r1, [pc, #104]	@ (8005f98 <vTaskSwitchContext+0xb4>)
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0e3      	beq.n	8005f08 <vTaskSwitchContext+0x24>
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4a13      	ldr	r2, [pc, #76]	@ (8005f98 <vTaskSwitchContext+0xb4>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3308      	adds	r3, #8
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d104      	bne.n	8005f70 <vTaskSwitchContext+0x8c>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4a09      	ldr	r2, [pc, #36]	@ (8005f9c <vTaskSwitchContext+0xb8>)
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4a06      	ldr	r2, [pc, #24]	@ (8005f94 <vTaskSwitchContext+0xb0>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	200412f4 	.word	0x200412f4
 8005f90:	200412e0 	.word	0x200412e0
 8005f94:	200412d4 	.word	0x200412d4
 8005f98:	20040dfc 	.word	0x20040dfc
 8005f9c:	20040df8 	.word	0x20040df8

08005fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <vTaskPlaceOnEventList+0x48>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3318      	adds	r3, #24
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fe fe08 	bl	8004be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	6838      	ldr	r0, [r7, #0]
 8005fda:	f000 fa81 	bl	80064e0 <prvAddCurrentTaskToDelayedList>
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20040df8 	.word	0x20040df8

08005fec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	617b      	str	r3, [r7, #20]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <vTaskPlaceOnEventListRestricted+0x54>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3318      	adds	r3, #24
 800601c:	4619      	mov	r1, r3
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7fe fdbd 	bl	8004b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800602a:	f04f 33ff 	mov.w	r3, #4294967295
 800602e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	68b8      	ldr	r0, [r7, #8]
 8006034:	f000 fa54 	bl	80064e0 <prvAddCurrentTaskToDelayedList>
	}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20040df8 	.word	0x20040df8

08006044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60fb      	str	r3, [r7, #12]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3318      	adds	r3, #24
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fdee 	bl	8004c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800607c:	4b1d      	ldr	r3, [pc, #116]	@ (80060f4 <xTaskRemoveFromEventList+0xb0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11d      	bne.n	80060c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fde5 	bl	8004c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <xTaskRemoveFromEventList+0xb4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d903      	bls.n	80060a2 <xTaskRemoveFromEventList+0x5e>
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	4a16      	ldr	r2, [pc, #88]	@ (80060f8 <xTaskRemoveFromEventList+0xb4>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <xTaskRemoveFromEventList+0xb8>)
 80060b0:	441a      	add	r2, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe fd70 	bl	8004b9e <vListInsertEnd>
 80060be:	e005      	b.n	80060cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3318      	adds	r3, #24
 80060c4:	4619      	mov	r1, r3
 80060c6:	480e      	ldr	r0, [pc, #56]	@ (8006100 <xTaskRemoveFromEventList+0xbc>)
 80060c8:	f7fe fd69 	bl	8004b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006104 <xTaskRemoveFromEventList+0xc0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d905      	bls.n	80060e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060de:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <xTaskRemoveFromEventList+0xc4>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e001      	b.n	80060ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060ea:	697b      	ldr	r3, [r7, #20]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200412f4 	.word	0x200412f4
 80060f8:	200412d4 	.word	0x200412d4
 80060fc:	20040dfc 	.word	0x20040dfc
 8006100:	2004128c 	.word	0x2004128c
 8006104:	20040df8 	.word	0x20040df8
 8006108:	200412e0 	.word	0x200412e0

0800610c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006114:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <vTaskInternalSetTimeOutState+0x24>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <vTaskInternalSetTimeOutState+0x28>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	200412e4 	.word	0x200412e4
 8006134:	200412d0 	.word	0x200412d0

08006138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	613b      	str	r3, [r7, #16]
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60fb      	str	r3, [r7, #12]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800617e:	f000 fe8b 	bl	8006e98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006182:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <xTaskCheckForTimeOut+0xc0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d102      	bne.n	80061a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e023      	b.n	80061ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <xTaskCheckForTimeOut+0xc4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d007      	beq.n	80061be <xTaskCheckForTimeOut+0x86>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e015      	b.n	80061ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d20b      	bcs.n	80061e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff99 	bl	800610c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	e004      	b.n	80061ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061ea:	f000 fe87 	bl	8006efc <vPortExitCritical>

	return xReturn;
 80061ee:	69fb      	ldr	r3, [r7, #28]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200412d0 	.word	0x200412d0
 80061fc:	200412e4 	.word	0x200412e4

08006200 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006204:	4b03      	ldr	r3, [pc, #12]	@ (8006214 <vTaskMissedYield+0x14>)
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	200412e0 	.word	0x200412e0

08006218 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006220:	f000 f852 	bl	80062c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006224:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <prvIdleTask+0x28>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d9f9      	bls.n	8006220 <prvIdleTask+0x8>
			{
				taskYIELD();
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <prvIdleTask+0x2c>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800623c:	e7f0      	b.n	8006220 <prvIdleTask+0x8>
 800623e:	bf00      	nop
 8006240:	20040dfc 	.word	0x20040dfc
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	e00c      	b.n	800626e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4a12      	ldr	r2, [pc, #72]	@ (80062a8 <prvInitialiseTaskLists+0x60>)
 8006260:	4413      	add	r3, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fc6e 	bl	8004b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3301      	adds	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b37      	cmp	r3, #55	@ 0x37
 8006272:	d9ef      	bls.n	8006254 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006274:	480d      	ldr	r0, [pc, #52]	@ (80062ac <prvInitialiseTaskLists+0x64>)
 8006276:	f7fe fc65 	bl	8004b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800627a:	480d      	ldr	r0, [pc, #52]	@ (80062b0 <prvInitialiseTaskLists+0x68>)
 800627c:	f7fe fc62 	bl	8004b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006280:	480c      	ldr	r0, [pc, #48]	@ (80062b4 <prvInitialiseTaskLists+0x6c>)
 8006282:	f7fe fc5f 	bl	8004b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006286:	480c      	ldr	r0, [pc, #48]	@ (80062b8 <prvInitialiseTaskLists+0x70>)
 8006288:	f7fe fc5c 	bl	8004b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800628c:	480b      	ldr	r0, [pc, #44]	@ (80062bc <prvInitialiseTaskLists+0x74>)
 800628e:	f7fe fc59 	bl	8004b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006292:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <prvInitialiseTaskLists+0x78>)
 8006294:	4a05      	ldr	r2, [pc, #20]	@ (80062ac <prvInitialiseTaskLists+0x64>)
 8006296:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006298:	4b0a      	ldr	r3, [pc, #40]	@ (80062c4 <prvInitialiseTaskLists+0x7c>)
 800629a:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <prvInitialiseTaskLists+0x68>)
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20040dfc 	.word	0x20040dfc
 80062ac:	2004125c 	.word	0x2004125c
 80062b0:	20041270 	.word	0x20041270
 80062b4:	2004128c 	.word	0x2004128c
 80062b8:	200412a0 	.word	0x200412a0
 80062bc:	200412b8 	.word	0x200412b8
 80062c0:	20041284 	.word	0x20041284
 80062c4:	20041288 	.word	0x20041288

080062c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ce:	e019      	b.n	8006304 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062d0:	f000 fde2 	bl	8006e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d4:	4b10      	ldr	r3, [pc, #64]	@ (8006318 <prvCheckTasksWaitingTermination+0x50>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fcb9 	bl	8004c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <prvCheckTasksWaitingTermination+0x54>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	4a0b      	ldr	r2, [pc, #44]	@ (800631c <prvCheckTasksWaitingTermination+0x54>)
 80062ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <prvCheckTasksWaitingTermination+0x58>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006320 <prvCheckTasksWaitingTermination+0x58>)
 80062f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062fa:	f000 fdff 	bl	8006efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f810 	bl	8006324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006304:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <prvCheckTasksWaitingTermination+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e1      	bne.n	80062d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200412a0 	.word	0x200412a0
 800631c:	200412cc 	.word	0x200412cc
 8006320:	200412b4 	.word	0x200412b4

08006324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ff9c 	bl	8007278 <vPortFree>
				vPortFree( pxTCB );
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ff99 	bl	8007278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006346:	e019      	b.n	800637c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800634e:	2b01      	cmp	r3, #1
 8006350:	d103      	bne.n	800635a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 ff90 	bl	8007278 <vPortFree>
	}
 8006358:	e010      	b.n	800637c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006360:	2b02      	cmp	r3, #2
 8006362:	d00b      	beq.n	800637c <prvDeleteTCB+0x58>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <prvDeleteTCB+0x54>
	}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800638a:	4b0c      	ldr	r3, [pc, #48]	@ (80063bc <prvResetNextTaskUnblockTime+0x38>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006394:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800639c:	e008      	b.n	80063b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639e:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <prvResetNextTaskUnblockTime+0x38>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <prvResetNextTaskUnblockTime+0x3c>)
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20041284 	.word	0x20041284
 80063c0:	200412ec 	.word	0x200412ec

080063c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <xTaskGetSchedulerState+0x34>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063d2:	2301      	movs	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	e008      	b.n	80063ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <xTaskGetSchedulerState+0x38>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063e0:	2302      	movs	r3, #2
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e001      	b.n	80063ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063ea:	687b      	ldr	r3, [r7, #4]
	}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	200412d8 	.word	0x200412d8
 80063fc:	200412f4 	.word	0x200412f4

08006400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d058      	beq.n	80064c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006416:	4b2f      	ldr	r3, [pc, #188]	@ (80064d4 <xTaskPriorityDisinherit+0xd4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d00b      	beq.n	8006438 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60bb      	str	r3, [r7, #8]
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645c:	1e5a      	subs	r2, r3, #1
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800646a:	429a      	cmp	r2, r3
 800646c:	d02c      	beq.n	80064c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006472:	2b00      	cmp	r3, #0
 8006474:	d128      	bne.n	80064c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3304      	adds	r3, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fbec 	bl	8004c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006498:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <xTaskPriorityDisinherit+0xd8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d903      	bls.n	80064a8 <xTaskPriorityDisinherit+0xa8>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	4a0c      	ldr	r2, [pc, #48]	@ (80064d8 <xTaskPriorityDisinherit+0xd8>)
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4a09      	ldr	r2, [pc, #36]	@ (80064dc <xTaskPriorityDisinherit+0xdc>)
 80064b6:	441a      	add	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fe fb6d 	bl	8004b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064c8:	697b      	ldr	r3, [r7, #20]
	}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20040df8 	.word	0x20040df8
 80064d8:	200412d4 	.word	0x200412d4
 80064dc:	20040dfc 	.word	0x20040dfc

080064e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ea:	4b21      	ldr	r3, [pc, #132]	@ (8006570 <prvAddCurrentTaskToDelayedList+0x90>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f0:	4b20      	ldr	r3, [pc, #128]	@ (8006574 <prvAddCurrentTaskToDelayedList+0x94>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fbae 	bl	8004c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d10a      	bne.n	800651a <prvAddCurrentTaskToDelayedList+0x3a>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800650a:	4b1a      	ldr	r3, [pc, #104]	@ (8006574 <prvAddCurrentTaskToDelayedList+0x94>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4819      	ldr	r0, [pc, #100]	@ (8006578 <prvAddCurrentTaskToDelayedList+0x98>)
 8006514:	f7fe fb43 	bl	8004b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006518:	e026      	b.n	8006568 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006522:	4b14      	ldr	r3, [pc, #80]	@ (8006574 <prvAddCurrentTaskToDelayedList+0x94>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d209      	bcs.n	8006546 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006532:	4b12      	ldr	r3, [pc, #72]	@ (800657c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b0f      	ldr	r3, [pc, #60]	@ (8006574 <prvAddCurrentTaskToDelayedList+0x94>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe fb51 	bl	8004be6 <vListInsert>
}
 8006544:	e010      	b.n	8006568 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006546:	4b0e      	ldr	r3, [pc, #56]	@ (8006580 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b0a      	ldr	r3, [pc, #40]	@ (8006574 <prvAddCurrentTaskToDelayedList+0x94>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f7fe fb47 	bl	8004be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006558:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <prvAddCurrentTaskToDelayedList+0xa4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	d202      	bcs.n	8006568 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006562:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6013      	str	r3, [r2, #0]
}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	200412d0 	.word	0x200412d0
 8006574:	20040df8 	.word	0x20040df8
 8006578:	200412b8 	.word	0x200412b8
 800657c:	20041288 	.word	0x20041288
 8006580:	20041284 	.word	0x20041284
 8006584:	200412ec 	.word	0x200412ec

08006588 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006592:	f000 fb13 	bl	8006bbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006596:	4b1d      	ldr	r3, [pc, #116]	@ (800660c <xTimerCreateTimerTask+0x84>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d021      	beq.n	80065e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065a6:	1d3a      	adds	r2, r7, #4
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	f107 030c 	add.w	r3, r7, #12
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe faad 	bl	8004b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	9202      	str	r2, [sp, #8]
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	2302      	movs	r3, #2
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	460a      	mov	r2, r1
 80065c8:	4911      	ldr	r1, [pc, #68]	@ (8006610 <xTimerCreateTimerTask+0x88>)
 80065ca:	4812      	ldr	r0, [pc, #72]	@ (8006614 <xTimerCreateTimerTask+0x8c>)
 80065cc:	f7ff f868 	bl	80056a0 <xTaskCreateStatic>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4a11      	ldr	r2, [pc, #68]	@ (8006618 <xTimerCreateTimerTask+0x90>)
 80065d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065d6:	4b10      	ldr	r3, [pc, #64]	@ (8006618 <xTimerCreateTimerTask+0x90>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065de:	2301      	movs	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	613b      	str	r3, [r7, #16]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006600:	697b      	ldr	r3, [r7, #20]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20041328 	.word	0x20041328
 8006610:	08007e9c 	.word	0x08007e9c
 8006614:	08006755 	.word	0x08006755
 8006618:	2004132c 	.word	0x2004132c

0800661c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	@ 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <xTimerGenericCommand+0x30>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	623b      	str	r3, [r7, #32]
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800664c:	4b19      	ldr	r3, [pc, #100]	@ (80066b4 <xTimerGenericCommand+0x98>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d02a      	beq.n	80066aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b05      	cmp	r3, #5
 8006664:	dc18      	bgt.n	8006698 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006666:	f7ff fead 	bl	80063c4 <xTaskGetSchedulerState>
 800666a:	4603      	mov	r3, r0
 800666c:	2b02      	cmp	r3, #2
 800666e:	d109      	bne.n	8006684 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006670:	4b10      	ldr	r3, [pc, #64]	@ (80066b4 <xTimerGenericCommand+0x98>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	f107 0110 	add.w	r1, r7, #16
 8006678:	2300      	movs	r3, #0
 800667a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800667c:	f7fe fc20 	bl	8004ec0 <xQueueGenericSend>
 8006680:	6278      	str	r0, [r7, #36]	@ 0x24
 8006682:	e012      	b.n	80066aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006684:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <xTimerGenericCommand+0x98>)
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	f107 0110 	add.w	r1, r7, #16
 800668c:	2300      	movs	r3, #0
 800668e:	2200      	movs	r2, #0
 8006690:	f7fe fc16 	bl	8004ec0 <xQueueGenericSend>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24
 8006696:	e008      	b.n	80066aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006698:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <xTimerGenericCommand+0x98>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	f107 0110 	add.w	r1, r7, #16
 80066a0:	2300      	movs	r3, #0
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	f7fe fd0e 	bl	80050c4 <xQueueGenericSendFromISR>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3728      	adds	r7, #40	@ 0x28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20041328 	.word	0x20041328

080066b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c2:	4b23      	ldr	r3, [pc, #140]	@ (8006750 <prvProcessExpiredTimer+0x98>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe fac1 	bl	8004c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d023      	beq.n	800672c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	699a      	ldr	r2, [r3, #24]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	18d1      	adds	r1, r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f000 f8d5 	bl	80068a0 <prvInsertTimerInActiveList>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066fc:	2300      	movs	r3, #0
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	2300      	movs	r3, #0
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	2100      	movs	r1, #0
 8006706:	6978      	ldr	r0, [r7, #20]
 8006708:	f7ff ff88 	bl	800661c <xTimerGenericCommand>
 800670c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d114      	bne.n	800673e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60fb      	str	r3, [r7, #12]
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	e7fd      	b.n	8006728 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	4798      	blx	r3
}
 8006746:	bf00      	nop
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20041320 	.word	0x20041320

08006754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f859 	bl	8006818 <prvGetNextExpireTime>
 8006766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f805 	bl	800677c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006772:	f000 f8d7 	bl	8006924 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006776:	bf00      	nop
 8006778:	e7f0      	b.n	800675c <prvTimerTask+0x8>
	...

0800677c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006786:	f7ff fa37 	bl	8005bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	4618      	mov	r0, r3
 8006790:	f000 f866 	bl	8006860 <prvSampleTimeNow>
 8006794:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d130      	bne.n	80067fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <prvProcessTimerOrBlockTask+0x3c>
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d806      	bhi.n	80067b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067aa:	f7ff fa33 	bl	8005c14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff81 	bl	80066b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067b6:	e024      	b.n	8006802 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067be:	4b13      	ldr	r3, [pc, #76]	@ (800680c <prvProcessTimerOrBlockTask+0x90>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <prvProcessTimerOrBlockTask+0x50>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <prvProcessTimerOrBlockTask+0x52>
 80067cc:	2300      	movs	r3, #0
 80067ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006810 <prvProcessTimerOrBlockTask+0x94>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	f7fe ff2b 	bl	8005638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067e2:	f7ff fa17 	bl	8005c14 <xTaskResumeAll>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067ec:	4b09      	ldr	r3, [pc, #36]	@ (8006814 <prvProcessTimerOrBlockTask+0x98>)
 80067ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	f3bf 8f6f 	isb	sy
}
 80067fc:	e001      	b.n	8006802 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067fe:	f7ff fa09 	bl	8005c14 <xTaskResumeAll>
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20041324 	.word	0x20041324
 8006810:	20041328 	.word	0x20041328
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006820:	4b0e      	ldr	r3, [pc, #56]	@ (800685c <prvGetNextExpireTime+0x44>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <prvGetNextExpireTime+0x16>
 800682a:	2201      	movs	r2, #1
 800682c:	e000      	b.n	8006830 <prvGetNextExpireTime+0x18>
 800682e:	2200      	movs	r2, #0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800683c:	4b07      	ldr	r3, [pc, #28]	@ (800685c <prvGetNextExpireTime+0x44>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e001      	b.n	800684c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20041320 	.word	0x20041320

08006860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006868:	f7ff fa72 	bl	8005d50 <xTaskGetTickCount>
 800686c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <prvSampleTimeNow+0x3c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d205      	bcs.n	8006884 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006878:	f000 f93a 	bl	8006af0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e002      	b.n	800688a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800688a:	4a04      	ldr	r2, [pc, #16]	@ (800689c <prvSampleTimeNow+0x3c>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006890:	68fb      	ldr	r3, [r7, #12]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20041330 	.word	0x20041330

080068a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d812      	bhi.n	80068ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d302      	bcc.n	80068da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	e01b      	b.n	8006912 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068da:	4b10      	ldr	r3, [pc, #64]	@ (800691c <prvInsertTimerInActiveList+0x7c>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f7fe f97e 	bl	8004be6 <vListInsert>
 80068ea:	e012      	b.n	8006912 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d206      	bcs.n	8006902 <prvInsertTimerInActiveList+0x62>
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d302      	bcc.n	8006902 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e007      	b.n	8006912 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006902:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <prvInsertTimerInActiveList+0x80>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7fe f96a 	bl	8004be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006912:	697b      	ldr	r3, [r7, #20]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20041324 	.word	0x20041324
 8006920:	20041320 	.word	0x20041320

08006924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08e      	sub	sp, #56	@ 0x38
 8006928:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800692a:	e0ce      	b.n	8006aca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	da19      	bge.n	8006966 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	3304      	adds	r3, #4
 8006936:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	61fb      	str	r3, [r7, #28]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800695c:	6850      	ldr	r0, [r2, #4]
 800695e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006960:	6892      	ldr	r2, [r2, #8]
 8006962:	4611      	mov	r1, r2
 8006964:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f2c0 80ae 	blt.w	8006aca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	3304      	adds	r3, #4
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe f96a 	bl	8004c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006984:	463b      	mov	r3, r7
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff ff6a 	bl	8006860 <prvSampleTimeNow>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b09      	cmp	r3, #9
 8006992:	f200 8097 	bhi.w	8006ac4 <prvProcessReceivedCommands+0x1a0>
 8006996:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <prvProcessReceivedCommands+0x78>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069c5 	.word	0x080069c5
 80069a8:	08006a3b 	.word	0x08006a3b
 80069ac:	08006a4f 	.word	0x08006a4f
 80069b0:	08006a9b 	.word	0x08006a9b
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069c5 	.word	0x080069c5
 80069bc:	08006a3b 	.word	0x08006a3b
 80069c0:	08006a4f 	.word	0x08006a4f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	18d1      	adds	r1, r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e4:	f7ff ff5c 	bl	80068a0 <prvInsertTimerInActiveList>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d06c      	beq.n	8006ac8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d061      	beq.n	8006ac8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	441a      	add	r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	2300      	movs	r3, #0
 8006a12:	2100      	movs	r1, #0
 8006a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a16:	f7ff fe01 	bl	800661c <xTimerGenericCommand>
 8006a1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d152      	bne.n	8006ac8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61bb      	str	r3, [r7, #24]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a4c:	e03d      	b.n	8006aca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10b      	bne.n	8006a86 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	617b      	str	r3, [r7, #20]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	18d1      	adds	r1, r2, r3
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a94:	f7ff ff04 	bl	80068a0 <prvInsertTimerInActiveList>
					break;
 8006a98:	e017      	b.n	8006aca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aaa:	f000 fbe5 	bl	8007278 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006aae:	e00c      	b.n	8006aca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ac2:	e002      	b.n	8006aca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <prvProcessReceivedCommands+0x1a6>
					break;
 8006ac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aca:	4b08      	ldr	r3, [pc, #32]	@ (8006aec <prvProcessReceivedCommands+0x1c8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	1d39      	adds	r1, r7, #4
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fb94 	bl	8005200 <xQueueReceive>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f47f af26 	bne.w	800692c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	3730      	adds	r7, #48	@ 0x30
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20041328 	.word	0x20041328

08006af0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006af6:	e049      	b.n	8006b8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006af8:	4b2e      	ldr	r3, [pc, #184]	@ (8006bb4 <prvSwitchTimerLists+0xc4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b02:	4b2c      	ldr	r3, [pc, #176]	@ (8006bb4 <prvSwitchTimerLists+0xc4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe f8a1 	bl	8004c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d02f      	beq.n	8006b8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4413      	add	r3, r2
 8006b34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d90e      	bls.n	8006b5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb4 <prvSwitchTimerLists+0xc4>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f7fe f846 	bl	8004be6 <vListInsert>
 8006b5a:	e017      	b.n	8006b8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	2100      	movs	r1, #0
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fd58 	bl	800661c <xTimerGenericCommand>
 8006b6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	603b      	str	r3, [r7, #0]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b8c:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <prvSwitchTimerLists+0xc4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1b0      	bne.n	8006af8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b96:	4b07      	ldr	r3, [pc, #28]	@ (8006bb4 <prvSwitchTimerLists+0xc4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b9c:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <prvSwitchTimerLists+0xc8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a04      	ldr	r2, [pc, #16]	@ (8006bb4 <prvSwitchTimerLists+0xc4>)
 8006ba2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ba4:	4a04      	ldr	r2, [pc, #16]	@ (8006bb8 <prvSwitchTimerLists+0xc8>)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6013      	str	r3, [r2, #0]
}
 8006baa:	bf00      	nop
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20041320 	.word	0x20041320
 8006bb8:	20041324 	.word	0x20041324

08006bbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bc2:	f000 f969 	bl	8006e98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bc6:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <prvCheckForValidListAndQueue+0x60>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d120      	bne.n	8006c10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bce:	4814      	ldr	r0, [pc, #80]	@ (8006c20 <prvCheckForValidListAndQueue+0x64>)
 8006bd0:	f7fd ffb8 	bl	8004b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bd4:	4813      	ldr	r0, [pc, #76]	@ (8006c24 <prvCheckForValidListAndQueue+0x68>)
 8006bd6:	f7fd ffb5 	bl	8004b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bda:	4b13      	ldr	r3, [pc, #76]	@ (8006c28 <prvCheckForValidListAndQueue+0x6c>)
 8006bdc:	4a10      	ldr	r2, [pc, #64]	@ (8006c20 <prvCheckForValidListAndQueue+0x64>)
 8006bde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006be0:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <prvCheckForValidListAndQueue+0x70>)
 8006be2:	4a10      	ldr	r2, [pc, #64]	@ (8006c24 <prvCheckForValidListAndQueue+0x68>)
 8006be4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006be6:	2300      	movs	r3, #0
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	4b11      	ldr	r3, [pc, #68]	@ (8006c30 <prvCheckForValidListAndQueue+0x74>)
 8006bec:	4a11      	ldr	r2, [pc, #68]	@ (8006c34 <prvCheckForValidListAndQueue+0x78>)
 8006bee:	2110      	movs	r1, #16
 8006bf0:	200a      	movs	r0, #10
 8006bf2:	f7fe f8c5 	bl	8004d80 <xQueueGenericCreateStatic>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4a08      	ldr	r2, [pc, #32]	@ (8006c1c <prvCheckForValidListAndQueue+0x60>)
 8006bfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bfc:	4b07      	ldr	r3, [pc, #28]	@ (8006c1c <prvCheckForValidListAndQueue+0x60>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <prvCheckForValidListAndQueue+0x60>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	490b      	ldr	r1, [pc, #44]	@ (8006c38 <prvCheckForValidListAndQueue+0x7c>)
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fcea 	bl	80055e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c10:	f000 f974 	bl	8006efc <vPortExitCritical>
}
 8006c14:	bf00      	nop
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20041328 	.word	0x20041328
 8006c20:	200412f8 	.word	0x200412f8
 8006c24:	2004130c 	.word	0x2004130c
 8006c28:	20041320 	.word	0x20041320
 8006c2c:	20041324 	.word	0x20041324
 8006c30:	200413d4 	.word	0x200413d4
 8006c34:	20041334 	.word	0x20041334
 8006c38:	08007ea4 	.word	0x08007ea4

08006c3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3b04      	subs	r3, #4
 8006c4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca0 <pxPortInitialiseStack+0x64>)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3b14      	subs	r3, #20
 8006c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3b04      	subs	r3, #4
 8006c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f06f 0202 	mvn.w	r2, #2
 8006c8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3b20      	subs	r3, #32
 8006c90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c92:	68fb      	ldr	r3, [r7, #12]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	08006ca5 	.word	0x08006ca5

08006ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cae:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <prvTaskExitError+0x58>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d00b      	beq.n	8006cd0 <prvTaskExitError+0x2c>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60fb      	str	r3, [r7, #12]
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	e7fd      	b.n	8006ccc <prvTaskExitError+0x28>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	60bb      	str	r3, [r7, #8]
}
 8006ce2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ce4:	bf00      	nop
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0fc      	beq.n	8006ce6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	2004000c 	.word	0x2004000c

08006d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d00:	4b07      	ldr	r3, [pc, #28]	@ (8006d20 <pxCurrentTCBConst2>)
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	6808      	ldr	r0, [r1, #0]
 8006d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	f380 8809 	msr	PSP, r0
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8811 	msr	BASEPRI, r0
 8006d1a:	4770      	bx	lr
 8006d1c:	f3af 8000 	nop.w

08006d20 <pxCurrentTCBConst2>:
 8006d20:	20040df8 	.word	0x20040df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop

08006d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d28:	4808      	ldr	r0, [pc, #32]	@ (8006d4c <prvPortStartFirstTask+0x24>)
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	6800      	ldr	r0, [r0, #0]
 8006d2e:	f380 8808 	msr	MSP, r0
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8814 	msr	CONTROL, r0
 8006d3a:	b662      	cpsie	i
 8006d3c:	b661      	cpsie	f
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	df00      	svc	0
 8006d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d4a:	bf00      	nop
 8006d4c:	e000ed08 	.word	0xe000ed08

08006d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d56:	4b47      	ldr	r3, [pc, #284]	@ (8006e74 <xPortStartScheduler+0x124>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a47      	ldr	r2, [pc, #284]	@ (8006e78 <xPortStartScheduler+0x128>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10b      	bne.n	8006d78 <xPortStartScheduler+0x28>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d78:	4b3e      	ldr	r3, [pc, #248]	@ (8006e74 <xPortStartScheduler+0x124>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e7c <xPortStartScheduler+0x12c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d10b      	bne.n	8006d9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	613b      	str	r3, [r7, #16]
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	e7fd      	b.n	8006d96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d9a:	4b39      	ldr	r3, [pc, #228]	@ (8006e80 <xPortStartScheduler+0x130>)
 8006d9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	22ff      	movs	r2, #255	@ 0xff
 8006daa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4b31      	ldr	r3, [pc, #196]	@ (8006e84 <xPortStartScheduler+0x134>)
 8006dc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dc2:	4b31      	ldr	r3, [pc, #196]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006dc4:	2207      	movs	r2, #7
 8006dc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dc8:	e009      	b.n	8006dde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006dca:	4b2f      	ldr	r3, [pc, #188]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006dd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de6:	2b80      	cmp	r3, #128	@ 0x80
 8006de8:	d0ef      	beq.n	8006dca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dea:	4b27      	ldr	r3, [pc, #156]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1c3 0307 	rsb	r3, r3, #7
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d00b      	beq.n	8006e0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60bb      	str	r3, [r7, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	4a1c      	ldr	r2, [pc, #112]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006e16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e18:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e20:	4a19      	ldr	r2, [pc, #100]	@ (8006e88 <xPortStartScheduler+0x138>)
 8006e22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e2c:	4b17      	ldr	r3, [pc, #92]	@ (8006e8c <xPortStartScheduler+0x13c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a16      	ldr	r2, [pc, #88]	@ (8006e8c <xPortStartScheduler+0x13c>)
 8006e32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e38:	4b14      	ldr	r3, [pc, #80]	@ (8006e8c <xPortStartScheduler+0x13c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a13      	ldr	r2, [pc, #76]	@ (8006e8c <xPortStartScheduler+0x13c>)
 8006e3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e44:	f000 f8da 	bl	8006ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e48:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <xPortStartScheduler+0x140>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e4e:	f000 f8f9 	bl	8007044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e52:	4b10      	ldr	r3, [pc, #64]	@ (8006e94 <xPortStartScheduler+0x144>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a0f      	ldr	r2, [pc, #60]	@ (8006e94 <xPortStartScheduler+0x144>)
 8006e58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e5e:	f7ff ff63 	bl	8006d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e62:	f7ff f83f 	bl	8005ee4 <vTaskSwitchContext>
	prvTaskExitError();
 8006e66:	f7ff ff1d 	bl	8006ca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	e000ed00 	.word	0xe000ed00
 8006e78:	410fc271 	.word	0x410fc271
 8006e7c:	410fc270 	.word	0x410fc270
 8006e80:	e000e400 	.word	0xe000e400
 8006e84:	20041424 	.word	0x20041424
 8006e88:	20041428 	.word	0x20041428
 8006e8c:	e000ed20 	.word	0xe000ed20
 8006e90:	2004000c 	.word	0x2004000c
 8006e94:	e000ef34 	.word	0xe000ef34

08006e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eb2:	4b10      	ldr	r3, [pc, #64]	@ (8006ef4 <vPortEnterCritical+0x5c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ef4 <vPortEnterCritical+0x5c>)
 8006eba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef4 <vPortEnterCritical+0x5c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d110      	bne.n	8006ee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <vPortEnterCritical+0x60>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	603b      	str	r3, [r7, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <vPortEnterCritical+0x4a>
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	2004000c 	.word	0x2004000c
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f02:	4b12      	ldr	r3, [pc, #72]	@ (8006f4c <vPortExitCritical+0x50>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <vPortExitCritical+0x26>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	607b      	str	r3, [r7, #4]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <vPortExitCritical+0x50>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	4a08      	ldr	r2, [pc, #32]	@ (8006f4c <vPortExitCritical+0x50>)
 8006f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f2c:	4b07      	ldr	r3, [pc, #28]	@ (8006f4c <vPortExitCritical+0x50>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d105      	bne.n	8006f40 <vPortExitCritical+0x44>
 8006f34:	2300      	movs	r3, #0
 8006f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f383 8811 	msr	BASEPRI, r3
}
 8006f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	2004000c 	.word	0x2004000c

08006f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f50:	f3ef 8009 	mrs	r0, PSP
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	4b15      	ldr	r3, [pc, #84]	@ (8006fb0 <pxCurrentTCBConst>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	f01e 0f10 	tst.w	lr, #16
 8006f60:	bf08      	it	eq
 8006f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	6010      	str	r0, [r2, #0]
 8006f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f74:	f380 8811 	msr	BASEPRI, r0
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f7fe ffb0 	bl	8005ee4 <vTaskSwitchContext>
 8006f84:	f04f 0000 	mov.w	r0, #0
 8006f88:	f380 8811 	msr	BASEPRI, r0
 8006f8c:	bc09      	pop	{r0, r3}
 8006f8e:	6819      	ldr	r1, [r3, #0]
 8006f90:	6808      	ldr	r0, [r1, #0]
 8006f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f96:	f01e 0f10 	tst.w	lr, #16
 8006f9a:	bf08      	it	eq
 8006f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fa0:	f380 8809 	msr	PSP, r0
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	f3af 8000 	nop.w

08006fb0 <pxCurrentTCBConst>:
 8006fb0:	20040df8 	.word	0x20040df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	607b      	str	r3, [r7, #4]
}
 8006fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fd2:	f7fe fecd 	bl	8005d70 <xTaskIncrementTick>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <xPortSysTickHandler+0x40>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f383 8811 	msr	BASEPRI, r3
}
 8006fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007000:	4b0b      	ldr	r3, [pc, #44]	@ (8007030 <vPortSetupTimerInterrupt+0x34>)
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007006:	4b0b      	ldr	r3, [pc, #44]	@ (8007034 <vPortSetupTimerInterrupt+0x38>)
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800700c:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <vPortSetupTimerInterrupt+0x3c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a0a      	ldr	r2, [pc, #40]	@ (800703c <vPortSetupTimerInterrupt+0x40>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	099b      	lsrs	r3, r3, #6
 8007018:	4a09      	ldr	r2, [pc, #36]	@ (8007040 <vPortSetupTimerInterrupt+0x44>)
 800701a:	3b01      	subs	r3, #1
 800701c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800701e:	4b04      	ldr	r3, [pc, #16]	@ (8007030 <vPortSetupTimerInterrupt+0x34>)
 8007020:	2207      	movs	r2, #7
 8007022:	601a      	str	r2, [r3, #0]
}
 8007024:	bf00      	nop
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	e000e010 	.word	0xe000e010
 8007034:	e000e018 	.word	0xe000e018
 8007038:	20040000 	.word	0x20040000
 800703c:	10624dd3 	.word	0x10624dd3
 8007040:	e000e014 	.word	0xe000e014

08007044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007054 <vPortEnableVFP+0x10>
 8007048:	6801      	ldr	r1, [r0, #0]
 800704a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800704e:	6001      	str	r1, [r0, #0]
 8007050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007052:	bf00      	nop
 8007054:	e000ed88 	.word	0xe000ed88

08007058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800705e:	f3ef 8305 	mrs	r3, IPSR
 8007062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d915      	bls.n	8007096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800706a:	4a18      	ldr	r2, [pc, #96]	@ (80070cc <vPortValidateInterruptPriority+0x74>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007074:	4b16      	ldr	r3, [pc, #88]	@ (80070d0 <vPortValidateInterruptPriority+0x78>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	7afa      	ldrb	r2, [r7, #11]
 800707a:	429a      	cmp	r2, r3
 800707c:	d20b      	bcs.n	8007096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007096:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <vPortValidateInterruptPriority+0x7c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800709e:	4b0e      	ldr	r3, [pc, #56]	@ (80070d8 <vPortValidateInterruptPriority+0x80>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d90b      	bls.n	80070be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	603b      	str	r3, [r7, #0]
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	e7fd      	b.n	80070ba <vPortValidateInterruptPriority+0x62>
	}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	e000e3f0 	.word	0xe000e3f0
 80070d0:	20041424 	.word	0x20041424
 80070d4:	e000ed0c 	.word	0xe000ed0c
 80070d8:	20041428 	.word	0x20041428

080070dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	@ 0x28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070e8:	f7fe fd86 	bl	8005bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007260 <pvPortMalloc+0x184>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070f4:	f000 f924 	bl	8007340 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007264 <pvPortMalloc+0x188>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4013      	ands	r3, r2
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 8095 	bne.w	8007230 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01e      	beq.n	800714a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800710c:	2208      	movs	r2, #8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d015      	beq.n	800714a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f023 0307 	bic.w	r3, r3, #7
 8007124:	3308      	adds	r3, #8
 8007126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <pvPortMalloc+0x6e>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	617b      	str	r3, [r7, #20]
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	e7fd      	b.n	8007146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d06f      	beq.n	8007230 <pvPortMalloc+0x154>
 8007150:	4b45      	ldr	r3, [pc, #276]	@ (8007268 <pvPortMalloc+0x18c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	429a      	cmp	r2, r3
 8007158:	d86a      	bhi.n	8007230 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800715a:	4b44      	ldr	r3, [pc, #272]	@ (800726c <pvPortMalloc+0x190>)
 800715c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800715e:	4b43      	ldr	r3, [pc, #268]	@ (800726c <pvPortMalloc+0x190>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007164:	e004      	b.n	8007170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	429a      	cmp	r2, r3
 8007178:	d903      	bls.n	8007182 <pvPortMalloc+0xa6>
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f1      	bne.n	8007166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007182:	4b37      	ldr	r3, [pc, #220]	@ (8007260 <pvPortMalloc+0x184>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007188:	429a      	cmp	r2, r3
 800718a:	d051      	beq.n	8007230 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2208      	movs	r2, #8
 8007192:	4413      	add	r3, r2
 8007194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	1ad2      	subs	r2, r2, r3
 80071a6:	2308      	movs	r3, #8
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d920      	bls.n	80071f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <pvPortMalloc+0xfc>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ea:	69b8      	ldr	r0, [r7, #24]
 80071ec:	f000 f90a 	bl	8007404 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007268 <pvPortMalloc+0x18c>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007268 <pvPortMalloc+0x18c>)
 80071fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007268 <pvPortMalloc+0x18c>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <pvPortMalloc+0x194>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d203      	bcs.n	8007212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800720a:	4b17      	ldr	r3, [pc, #92]	@ (8007268 <pvPortMalloc+0x18c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	@ (8007270 <pvPortMalloc+0x194>)
 8007210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	4b13      	ldr	r3, [pc, #76]	@ (8007264 <pvPortMalloc+0x188>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	431a      	orrs	r2, r3
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007226:	4b13      	ldr	r3, [pc, #76]	@ (8007274 <pvPortMalloc+0x198>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	4a11      	ldr	r2, [pc, #68]	@ (8007274 <pvPortMalloc+0x198>)
 800722e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007230:	f7fe fcf0 	bl	8005c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <pvPortMalloc+0x17a>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	60fb      	str	r3, [r7, #12]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <pvPortMalloc+0x176>
	return pvReturn;
 8007256:	69fb      	ldr	r3, [r7, #28]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3728      	adds	r7, #40	@ 0x28
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20041fec 	.word	0x20041fec
 8007264:	20042000 	.word	0x20042000
 8007268:	20041ff0 	.word	0x20041ff0
 800726c:	20041fe4 	.word	0x20041fe4
 8007270:	20041ff4 	.word	0x20041ff4
 8007274:	20041ff8 	.word	0x20041ff8

08007278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d04f      	beq.n	800732a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800728a:	2308      	movs	r3, #8
 800728c:	425b      	negs	r3, r3
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4413      	add	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	4b25      	ldr	r3, [pc, #148]	@ (8007334 <vPortFree+0xbc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vPortFree+0x46>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60fb      	str	r3, [r7, #12]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <vPortFree+0x66>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60bb      	str	r3, [r7, #8]
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	e7fd      	b.n	80072da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <vPortFree+0xbc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4013      	ands	r3, r2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01e      	beq.n	800732a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11a      	bne.n	800732a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007334 <vPortFree+0xbc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	43db      	mvns	r3, r3
 80072fe:	401a      	ands	r2, r3
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007304:	f7fe fc78 	bl	8005bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <vPortFree+0xc0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4413      	add	r3, r2
 8007312:	4a09      	ldr	r2, [pc, #36]	@ (8007338 <vPortFree+0xc0>)
 8007314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007316:	6938      	ldr	r0, [r7, #16]
 8007318:	f000 f874 	bl	8007404 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800731c:	4b07      	ldr	r3, [pc, #28]	@ (800733c <vPortFree+0xc4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	4a06      	ldr	r2, [pc, #24]	@ (800733c <vPortFree+0xc4>)
 8007324:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007326:	f7fe fc75 	bl	8005c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20042000 	.word	0x20042000
 8007338:	20041ff0 	.word	0x20041ff0
 800733c:	20041ffc 	.word	0x20041ffc

08007340 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007346:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800734a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800734c:	4b27      	ldr	r3, [pc, #156]	@ (80073ec <prvHeapInit+0xac>)
 800734e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00c      	beq.n	8007374 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3307      	adds	r3, #7
 800735e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0307 	bic.w	r3, r3, #7
 8007366:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <prvHeapInit+0xac>)
 8007370:	4413      	add	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007378:	4a1d      	ldr	r2, [pc, #116]	@ (80073f0 <prvHeapInit+0xb0>)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800737e:	4b1c      	ldr	r3, [pc, #112]	@ (80073f0 <prvHeapInit+0xb0>)
 8007380:	2200      	movs	r2, #0
 8007382:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	4413      	add	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800738c:	2208      	movs	r2, #8
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1a9b      	subs	r3, r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0307 	bic.w	r3, r3, #7
 800739a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a15      	ldr	r2, [pc, #84]	@ (80073f4 <prvHeapInit+0xb4>)
 80073a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073a2:	4b14      	ldr	r3, [pc, #80]	@ (80073f4 <prvHeapInit+0xb4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073aa:	4b12      	ldr	r3, [pc, #72]	@ (80073f4 <prvHeapInit+0xb4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073c0:	4b0c      	ldr	r3, [pc, #48]	@ (80073f4 <prvHeapInit+0xb4>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4a0a      	ldr	r2, [pc, #40]	@ (80073f8 <prvHeapInit+0xb8>)
 80073ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	4a09      	ldr	r2, [pc, #36]	@ (80073fc <prvHeapInit+0xbc>)
 80073d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073d8:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <prvHeapInit+0xc0>)
 80073da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80073de:	601a      	str	r2, [r3, #0]
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	2004142c 	.word	0x2004142c
 80073f0:	20041fe4 	.word	0x20041fe4
 80073f4:	20041fec 	.word	0x20041fec
 80073f8:	20041ff4 	.word	0x20041ff4
 80073fc:	20041ff0 	.word	0x20041ff0
 8007400:	20042000 	.word	0x20042000

08007404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800740c:	4b28      	ldr	r3, [pc, #160]	@ (80074b0 <prvInsertBlockIntoFreeList+0xac>)
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	e002      	b.n	8007418 <prvInsertBlockIntoFreeList+0x14>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	429a      	cmp	r2, r3
 8007420:	d8f7      	bhi.n	8007412 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	4413      	add	r3, r2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d108      	bne.n	8007446 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	441a      	add	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d118      	bne.n	800748c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b15      	ldr	r3, [pc, #84]	@ (80074b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d00d      	beq.n	8007482 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	441a      	add	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e008      	b.n	8007494 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007482:	4b0c      	ldr	r3, [pc, #48]	@ (80074b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e003      	b.n	8007494 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d002      	beq.n	80074a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20041fe4 	.word	0x20041fe4
 80074b4:	20041fec 	.word	0x20041fec

080074b8 <std>:
 80074b8:	2300      	movs	r3, #0
 80074ba:	b510      	push	{r4, lr}
 80074bc:	4604      	mov	r4, r0
 80074be:	e9c0 3300 	strd	r3, r3, [r0]
 80074c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074c6:	6083      	str	r3, [r0, #8]
 80074c8:	8181      	strh	r1, [r0, #12]
 80074ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80074cc:	81c2      	strh	r2, [r0, #14]
 80074ce:	6183      	str	r3, [r0, #24]
 80074d0:	4619      	mov	r1, r3
 80074d2:	2208      	movs	r2, #8
 80074d4:	305c      	adds	r0, #92	@ 0x5c
 80074d6:	f000 f9e7 	bl	80078a8 <memset>
 80074da:	4b0d      	ldr	r3, [pc, #52]	@ (8007510 <std+0x58>)
 80074dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <std+0x5c>)
 80074e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <std+0x60>)
 80074e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <std+0x64>)
 80074e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <std+0x68>)
 80074ec:	6224      	str	r4, [r4, #32]
 80074ee:	429c      	cmp	r4, r3
 80074f0:	d006      	beq.n	8007500 <std+0x48>
 80074f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074f6:	4294      	cmp	r4, r2
 80074f8:	d002      	beq.n	8007500 <std+0x48>
 80074fa:	33d0      	adds	r3, #208	@ 0xd0
 80074fc:	429c      	cmp	r4, r3
 80074fe:	d105      	bne.n	800750c <std+0x54>
 8007500:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007508:	f000 ba46 	b.w	8007998 <__retarget_lock_init_recursive>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	bf00      	nop
 8007510:	080076f9 	.word	0x080076f9
 8007514:	0800771b 	.word	0x0800771b
 8007518:	08007753 	.word	0x08007753
 800751c:	08007777 	.word	0x08007777
 8007520:	20042004 	.word	0x20042004

08007524 <stdio_exit_handler>:
 8007524:	4a02      	ldr	r2, [pc, #8]	@ (8007530 <stdio_exit_handler+0xc>)
 8007526:	4903      	ldr	r1, [pc, #12]	@ (8007534 <stdio_exit_handler+0x10>)
 8007528:	4803      	ldr	r0, [pc, #12]	@ (8007538 <stdio_exit_handler+0x14>)
 800752a:	f000 b869 	b.w	8007600 <_fwalk_sglue>
 800752e:	bf00      	nop
 8007530:	20040010 	.word	0x20040010
 8007534:	08007cb5 	.word	0x08007cb5
 8007538:	20040020 	.word	0x20040020

0800753c <cleanup_stdio>:
 800753c:	6841      	ldr	r1, [r0, #4]
 800753e:	4b0c      	ldr	r3, [pc, #48]	@ (8007570 <cleanup_stdio+0x34>)
 8007540:	4299      	cmp	r1, r3
 8007542:	b510      	push	{r4, lr}
 8007544:	4604      	mov	r4, r0
 8007546:	d001      	beq.n	800754c <cleanup_stdio+0x10>
 8007548:	f000 fbb4 	bl	8007cb4 <_fflush_r>
 800754c:	68a1      	ldr	r1, [r4, #8]
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <cleanup_stdio+0x38>)
 8007550:	4299      	cmp	r1, r3
 8007552:	d002      	beq.n	800755a <cleanup_stdio+0x1e>
 8007554:	4620      	mov	r0, r4
 8007556:	f000 fbad 	bl	8007cb4 <_fflush_r>
 800755a:	68e1      	ldr	r1, [r4, #12]
 800755c:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <cleanup_stdio+0x3c>)
 800755e:	4299      	cmp	r1, r3
 8007560:	d004      	beq.n	800756c <cleanup_stdio+0x30>
 8007562:	4620      	mov	r0, r4
 8007564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007568:	f000 bba4 	b.w	8007cb4 <_fflush_r>
 800756c:	bd10      	pop	{r4, pc}
 800756e:	bf00      	nop
 8007570:	20042004 	.word	0x20042004
 8007574:	2004206c 	.word	0x2004206c
 8007578:	200420d4 	.word	0x200420d4

0800757c <global_stdio_init.part.0>:
 800757c:	b510      	push	{r4, lr}
 800757e:	4b0b      	ldr	r3, [pc, #44]	@ (80075ac <global_stdio_init.part.0+0x30>)
 8007580:	4c0b      	ldr	r4, [pc, #44]	@ (80075b0 <global_stdio_init.part.0+0x34>)
 8007582:	4a0c      	ldr	r2, [pc, #48]	@ (80075b4 <global_stdio_init.part.0+0x38>)
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	4620      	mov	r0, r4
 8007588:	2200      	movs	r2, #0
 800758a:	2104      	movs	r1, #4
 800758c:	f7ff ff94 	bl	80074b8 <std>
 8007590:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007594:	2201      	movs	r2, #1
 8007596:	2109      	movs	r1, #9
 8007598:	f7ff ff8e 	bl	80074b8 <std>
 800759c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075a0:	2202      	movs	r2, #2
 80075a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a6:	2112      	movs	r1, #18
 80075a8:	f7ff bf86 	b.w	80074b8 <std>
 80075ac:	2004213c 	.word	0x2004213c
 80075b0:	20042004 	.word	0x20042004
 80075b4:	08007525 	.word	0x08007525

080075b8 <__sfp_lock_acquire>:
 80075b8:	4801      	ldr	r0, [pc, #4]	@ (80075c0 <__sfp_lock_acquire+0x8>)
 80075ba:	f000 b9ee 	b.w	800799a <__retarget_lock_acquire_recursive>
 80075be:	bf00      	nop
 80075c0:	20042145 	.word	0x20042145

080075c4 <__sfp_lock_release>:
 80075c4:	4801      	ldr	r0, [pc, #4]	@ (80075cc <__sfp_lock_release+0x8>)
 80075c6:	f000 b9e9 	b.w	800799c <__retarget_lock_release_recursive>
 80075ca:	bf00      	nop
 80075cc:	20042145 	.word	0x20042145

080075d0 <__sinit>:
 80075d0:	b510      	push	{r4, lr}
 80075d2:	4604      	mov	r4, r0
 80075d4:	f7ff fff0 	bl	80075b8 <__sfp_lock_acquire>
 80075d8:	6a23      	ldr	r3, [r4, #32]
 80075da:	b11b      	cbz	r3, 80075e4 <__sinit+0x14>
 80075dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e0:	f7ff bff0 	b.w	80075c4 <__sfp_lock_release>
 80075e4:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <__sinit+0x28>)
 80075e6:	6223      	str	r3, [r4, #32]
 80075e8:	4b04      	ldr	r3, [pc, #16]	@ (80075fc <__sinit+0x2c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f5      	bne.n	80075dc <__sinit+0xc>
 80075f0:	f7ff ffc4 	bl	800757c <global_stdio_init.part.0>
 80075f4:	e7f2      	b.n	80075dc <__sinit+0xc>
 80075f6:	bf00      	nop
 80075f8:	0800753d 	.word	0x0800753d
 80075fc:	2004213c 	.word	0x2004213c

08007600 <_fwalk_sglue>:
 8007600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007604:	4607      	mov	r7, r0
 8007606:	4688      	mov	r8, r1
 8007608:	4614      	mov	r4, r2
 800760a:	2600      	movs	r6, #0
 800760c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007610:	f1b9 0901 	subs.w	r9, r9, #1
 8007614:	d505      	bpl.n	8007622 <_fwalk_sglue+0x22>
 8007616:	6824      	ldr	r4, [r4, #0]
 8007618:	2c00      	cmp	r4, #0
 800761a:	d1f7      	bne.n	800760c <_fwalk_sglue+0xc>
 800761c:	4630      	mov	r0, r6
 800761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d907      	bls.n	8007638 <_fwalk_sglue+0x38>
 8007628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800762c:	3301      	adds	r3, #1
 800762e:	d003      	beq.n	8007638 <_fwalk_sglue+0x38>
 8007630:	4629      	mov	r1, r5
 8007632:	4638      	mov	r0, r7
 8007634:	47c0      	blx	r8
 8007636:	4306      	orrs	r6, r0
 8007638:	3568      	adds	r5, #104	@ 0x68
 800763a:	e7e9      	b.n	8007610 <_fwalk_sglue+0x10>

0800763c <_puts_r>:
 800763c:	6a03      	ldr	r3, [r0, #32]
 800763e:	b570      	push	{r4, r5, r6, lr}
 8007640:	6884      	ldr	r4, [r0, #8]
 8007642:	4605      	mov	r5, r0
 8007644:	460e      	mov	r6, r1
 8007646:	b90b      	cbnz	r3, 800764c <_puts_r+0x10>
 8007648:	f7ff ffc2 	bl	80075d0 <__sinit>
 800764c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800764e:	07db      	lsls	r3, r3, #31
 8007650:	d405      	bmi.n	800765e <_puts_r+0x22>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	0598      	lsls	r0, r3, #22
 8007656:	d402      	bmi.n	800765e <_puts_r+0x22>
 8007658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800765a:	f000 f99e 	bl	800799a <__retarget_lock_acquire_recursive>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	0719      	lsls	r1, r3, #28
 8007662:	d502      	bpl.n	800766a <_puts_r+0x2e>
 8007664:	6923      	ldr	r3, [r4, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d135      	bne.n	80076d6 <_puts_r+0x9a>
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f000 f8c5 	bl	80077fc <__swsetup_r>
 8007672:	b380      	cbz	r0, 80076d6 <_puts_r+0x9a>
 8007674:	f04f 35ff 	mov.w	r5, #4294967295
 8007678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800767a:	07da      	lsls	r2, r3, #31
 800767c:	d405      	bmi.n	800768a <_puts_r+0x4e>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	059b      	lsls	r3, r3, #22
 8007682:	d402      	bmi.n	800768a <_puts_r+0x4e>
 8007684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007686:	f000 f989 	bl	800799c <__retarget_lock_release_recursive>
 800768a:	4628      	mov	r0, r5
 800768c:	bd70      	pop	{r4, r5, r6, pc}
 800768e:	2b00      	cmp	r3, #0
 8007690:	da04      	bge.n	800769c <_puts_r+0x60>
 8007692:	69a2      	ldr	r2, [r4, #24]
 8007694:	429a      	cmp	r2, r3
 8007696:	dc17      	bgt.n	80076c8 <_puts_r+0x8c>
 8007698:	290a      	cmp	r1, #10
 800769a:	d015      	beq.n	80076c8 <_puts_r+0x8c>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	7019      	strb	r1, [r3, #0]
 80076a4:	68a3      	ldr	r3, [r4, #8]
 80076a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076aa:	3b01      	subs	r3, #1
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d1ed      	bne.n	800768e <_puts_r+0x52>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da11      	bge.n	80076da <_puts_r+0x9e>
 80076b6:	4622      	mov	r2, r4
 80076b8:	210a      	movs	r1, #10
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 f85f 	bl	800777e <__swbuf_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d0d7      	beq.n	8007674 <_puts_r+0x38>
 80076c4:	250a      	movs	r5, #10
 80076c6:	e7d7      	b.n	8007678 <_puts_r+0x3c>
 80076c8:	4622      	mov	r2, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f857 	bl	800777e <__swbuf_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d1e7      	bne.n	80076a4 <_puts_r+0x68>
 80076d4:	e7ce      	b.n	8007674 <_puts_r+0x38>
 80076d6:	3e01      	subs	r6, #1
 80076d8:	e7e4      	b.n	80076a4 <_puts_r+0x68>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	220a      	movs	r2, #10
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e7ee      	b.n	80076c4 <_puts_r+0x88>
	...

080076e8 <puts>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	@ (80076f4 <puts+0xc>)
 80076ea:	4601      	mov	r1, r0
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f7ff bfa5 	b.w	800763c <_puts_r>
 80076f2:	bf00      	nop
 80076f4:	2004001c 	.word	0x2004001c

080076f8 <__sread>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	f000 f8fc 	bl	80078fc <_read_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	bfab      	itete	ge
 8007708:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800770a:	89a3      	ldrhlt	r3, [r4, #12]
 800770c:	181b      	addge	r3, r3, r0
 800770e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007712:	bfac      	ite	ge
 8007714:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007716:	81a3      	strhlt	r3, [r4, #12]
 8007718:	bd10      	pop	{r4, pc}

0800771a <__swrite>:
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	461f      	mov	r7, r3
 8007720:	898b      	ldrh	r3, [r1, #12]
 8007722:	05db      	lsls	r3, r3, #23
 8007724:	4605      	mov	r5, r0
 8007726:	460c      	mov	r4, r1
 8007728:	4616      	mov	r6, r2
 800772a:	d505      	bpl.n	8007738 <__swrite+0x1e>
 800772c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007730:	2302      	movs	r3, #2
 8007732:	2200      	movs	r2, #0
 8007734:	f000 f8d0 	bl	80078d8 <_lseek_r>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	4632      	mov	r2, r6
 8007746:	463b      	mov	r3, r7
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	f000 b8e7 	b.w	8007920 <_write_r>

08007752 <__sseek>:
 8007752:	b510      	push	{r4, lr}
 8007754:	460c      	mov	r4, r1
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 f8bd 	bl	80078d8 <_lseek_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	bf15      	itete	ne
 8007764:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007766:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800776a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800776e:	81a3      	strheq	r3, [r4, #12]
 8007770:	bf18      	it	ne
 8007772:	81a3      	strhne	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__sclose>:
 8007776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777a:	f000 b89d 	b.w	80078b8 <_close_r>

0800777e <__swbuf_r>:
 800777e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007780:	460e      	mov	r6, r1
 8007782:	4614      	mov	r4, r2
 8007784:	4605      	mov	r5, r0
 8007786:	b118      	cbz	r0, 8007790 <__swbuf_r+0x12>
 8007788:	6a03      	ldr	r3, [r0, #32]
 800778a:	b90b      	cbnz	r3, 8007790 <__swbuf_r+0x12>
 800778c:	f7ff ff20 	bl	80075d0 <__sinit>
 8007790:	69a3      	ldr	r3, [r4, #24]
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	071a      	lsls	r2, r3, #28
 8007798:	d501      	bpl.n	800779e <__swbuf_r+0x20>
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	b943      	cbnz	r3, 80077b0 <__swbuf_r+0x32>
 800779e:	4621      	mov	r1, r4
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 f82b 	bl	80077fc <__swsetup_r>
 80077a6:	b118      	cbz	r0, 80077b0 <__swbuf_r+0x32>
 80077a8:	f04f 37ff 	mov.w	r7, #4294967295
 80077ac:	4638      	mov	r0, r7
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	6922      	ldr	r2, [r4, #16]
 80077b4:	1a98      	subs	r0, r3, r2
 80077b6:	6963      	ldr	r3, [r4, #20]
 80077b8:	b2f6      	uxtb	r6, r6
 80077ba:	4283      	cmp	r3, r0
 80077bc:	4637      	mov	r7, r6
 80077be:	dc05      	bgt.n	80077cc <__swbuf_r+0x4e>
 80077c0:	4621      	mov	r1, r4
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fa76 	bl	8007cb4 <_fflush_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1ed      	bne.n	80077a8 <__swbuf_r+0x2a>
 80077cc:	68a3      	ldr	r3, [r4, #8]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	701e      	strb	r6, [r3, #0]
 80077da:	6962      	ldr	r2, [r4, #20]
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	429a      	cmp	r2, r3
 80077e0:	d004      	beq.n	80077ec <__swbuf_r+0x6e>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	d5e1      	bpl.n	80077ac <__swbuf_r+0x2e>
 80077e8:	2e0a      	cmp	r6, #10
 80077ea:	d1df      	bne.n	80077ac <__swbuf_r+0x2e>
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fa60 	bl	8007cb4 <_fflush_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d0d9      	beq.n	80077ac <__swbuf_r+0x2e>
 80077f8:	e7d6      	b.n	80077a8 <__swbuf_r+0x2a>
	...

080077fc <__swsetup_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4b29      	ldr	r3, [pc, #164]	@ (80078a4 <__swsetup_r+0xa8>)
 8007800:	4605      	mov	r5, r0
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	460c      	mov	r4, r1
 8007806:	b118      	cbz	r0, 8007810 <__swsetup_r+0x14>
 8007808:	6a03      	ldr	r3, [r0, #32]
 800780a:	b90b      	cbnz	r3, 8007810 <__swsetup_r+0x14>
 800780c:	f7ff fee0 	bl	80075d0 <__sinit>
 8007810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007814:	0719      	lsls	r1, r3, #28
 8007816:	d422      	bmi.n	800785e <__swsetup_r+0x62>
 8007818:	06da      	lsls	r2, r3, #27
 800781a:	d407      	bmi.n	800782c <__swsetup_r+0x30>
 800781c:	2209      	movs	r2, #9
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	e033      	b.n	8007894 <__swsetup_r+0x98>
 800782c:	0758      	lsls	r0, r3, #29
 800782e:	d512      	bpl.n	8007856 <__swsetup_r+0x5a>
 8007830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007832:	b141      	cbz	r1, 8007846 <__swsetup_r+0x4a>
 8007834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007838:	4299      	cmp	r1, r3
 800783a:	d002      	beq.n	8007842 <__swsetup_r+0x46>
 800783c:	4628      	mov	r0, r5
 800783e:	f000 f8bd 	bl	80079bc <_free_r>
 8007842:	2300      	movs	r3, #0
 8007844:	6363      	str	r3, [r4, #52]	@ 0x34
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	2300      	movs	r3, #0
 8007850:	6063      	str	r3, [r4, #4]
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f043 0308 	orr.w	r3, r3, #8
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	b94b      	cbnz	r3, 8007876 <__swsetup_r+0x7a>
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786c:	d003      	beq.n	8007876 <__swsetup_r+0x7a>
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 fa6d 	bl	8007d50 <__smakebuf_r>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	f013 0201 	ands.w	r2, r3, #1
 800787e:	d00a      	beq.n	8007896 <__swsetup_r+0x9a>
 8007880:	2200      	movs	r2, #0
 8007882:	60a2      	str	r2, [r4, #8]
 8007884:	6962      	ldr	r2, [r4, #20]
 8007886:	4252      	negs	r2, r2
 8007888:	61a2      	str	r2, [r4, #24]
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	b942      	cbnz	r2, 80078a0 <__swsetup_r+0xa4>
 800788e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007892:	d1c5      	bne.n	8007820 <__swsetup_r+0x24>
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	0799      	lsls	r1, r3, #30
 8007898:	bf58      	it	pl
 800789a:	6962      	ldrpl	r2, [r4, #20]
 800789c:	60a2      	str	r2, [r4, #8]
 800789e:	e7f4      	b.n	800788a <__swsetup_r+0x8e>
 80078a0:	2000      	movs	r0, #0
 80078a2:	e7f7      	b.n	8007894 <__swsetup_r+0x98>
 80078a4:	2004001c 	.word	0x2004001c

080078a8 <memset>:
 80078a8:	4402      	add	r2, r0
 80078aa:	4603      	mov	r3, r0
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d100      	bne.n	80078b2 <memset+0xa>
 80078b0:	4770      	bx	lr
 80078b2:	f803 1b01 	strb.w	r1, [r3], #1
 80078b6:	e7f9      	b.n	80078ac <memset+0x4>

080078b8 <_close_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d06      	ldr	r5, [pc, #24]	@ (80078d4 <_close_r+0x1c>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7f9 fac3 	bl	8000e4e <_close>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_close_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_close_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	20042140 	.word	0x20042140

080078d8 <_lseek_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	@ (80078f8 <_lseek_r+0x20>)
 80078dc:	4604      	mov	r4, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f7f9 fad8 	bl	8000e9c <_lseek>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_lseek_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_lseek_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20042140 	.word	0x20042140

080078fc <_read_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d07      	ldr	r5, [pc, #28]	@ (800791c <_read_r+0x20>)
 8007900:	4604      	mov	r4, r0
 8007902:	4608      	mov	r0, r1
 8007904:	4611      	mov	r1, r2
 8007906:	2200      	movs	r2, #0
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	f7f9 fa66 	bl	8000ddc <_read>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_read_r+0x1e>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_read_r+0x1e>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	20042140 	.word	0x20042140

08007920 <_write_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	@ (8007940 <_write_r+0x20>)
 8007924:	4604      	mov	r4, r0
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	2200      	movs	r2, #0
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7f9 fa71 	bl	8000e16 <_write>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_write_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_write_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20042140 	.word	0x20042140

08007944 <__errno>:
 8007944:	4b01      	ldr	r3, [pc, #4]	@ (800794c <__errno+0x8>)
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	2004001c 	.word	0x2004001c

08007950 <__libc_init_array>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	4d0d      	ldr	r5, [pc, #52]	@ (8007988 <__libc_init_array+0x38>)
 8007954:	4c0d      	ldr	r4, [pc, #52]	@ (800798c <__libc_init_array+0x3c>)
 8007956:	1b64      	subs	r4, r4, r5
 8007958:	10a4      	asrs	r4, r4, #2
 800795a:	2600      	movs	r6, #0
 800795c:	42a6      	cmp	r6, r4
 800795e:	d109      	bne.n	8007974 <__libc_init_array+0x24>
 8007960:	4d0b      	ldr	r5, [pc, #44]	@ (8007990 <__libc_init_array+0x40>)
 8007962:	4c0c      	ldr	r4, [pc, #48]	@ (8007994 <__libc_init_array+0x44>)
 8007964:	f000 fa62 	bl	8007e2c <_init>
 8007968:	1b64      	subs	r4, r4, r5
 800796a:	10a4      	asrs	r4, r4, #2
 800796c:	2600      	movs	r6, #0
 800796e:	42a6      	cmp	r6, r4
 8007970:	d105      	bne.n	800797e <__libc_init_array+0x2e>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	f855 3b04 	ldr.w	r3, [r5], #4
 8007978:	4798      	blx	r3
 800797a:	3601      	adds	r6, #1
 800797c:	e7ee      	b.n	800795c <__libc_init_array+0xc>
 800797e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007982:	4798      	blx	r3
 8007984:	3601      	adds	r6, #1
 8007986:	e7f2      	b.n	800796e <__libc_init_array+0x1e>
 8007988:	08007f24 	.word	0x08007f24
 800798c:	08007f24 	.word	0x08007f24
 8007990:	08007f24 	.word	0x08007f24
 8007994:	08007f28 	.word	0x08007f28

08007998 <__retarget_lock_init_recursive>:
 8007998:	4770      	bx	lr

0800799a <__retarget_lock_acquire_recursive>:
 800799a:	4770      	bx	lr

0800799c <__retarget_lock_release_recursive>:
 800799c:	4770      	bx	lr

0800799e <memcpy>:
 800799e:	440a      	add	r2, r1
 80079a0:	4291      	cmp	r1, r2
 80079a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a6:	d100      	bne.n	80079aa <memcpy+0xc>
 80079a8:	4770      	bx	lr
 80079aa:	b510      	push	{r4, lr}
 80079ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b4:	4291      	cmp	r1, r2
 80079b6:	d1f9      	bne.n	80079ac <memcpy+0xe>
 80079b8:	bd10      	pop	{r4, pc}
	...

080079bc <_free_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4605      	mov	r5, r0
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d041      	beq.n	8007a48 <_free_r+0x8c>
 80079c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c8:	1f0c      	subs	r4, r1, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfb8      	it	lt
 80079ce:	18e4      	addlt	r4, r4, r3
 80079d0:	f000 f8e0 	bl	8007b94 <__malloc_lock>
 80079d4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a4c <_free_r+0x90>)
 80079d6:	6813      	ldr	r3, [r2, #0]
 80079d8:	b933      	cbnz	r3, 80079e8 <_free_r+0x2c>
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	6014      	str	r4, [r2, #0]
 80079de:	4628      	mov	r0, r5
 80079e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079e4:	f000 b8dc 	b.w	8007ba0 <__malloc_unlock>
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d908      	bls.n	80079fe <_free_r+0x42>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf01      	itttt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	1809      	addeq	r1, r1, r0
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	e7ed      	b.n	80079da <_free_r+0x1e>
 80079fe:	461a      	mov	r2, r3
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	b10b      	cbz	r3, 8007a08 <_free_r+0x4c>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d9fa      	bls.n	80079fe <_free_r+0x42>
 8007a08:	6811      	ldr	r1, [r2, #0]
 8007a0a:	1850      	adds	r0, r2, r1
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d10b      	bne.n	8007a28 <_free_r+0x6c>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	4401      	add	r1, r0
 8007a14:	1850      	adds	r0, r2, r1
 8007a16:	4283      	cmp	r3, r0
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	d1e0      	bne.n	80079de <_free_r+0x22>
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	6053      	str	r3, [r2, #4]
 8007a22:	4408      	add	r0, r1
 8007a24:	6010      	str	r0, [r2, #0]
 8007a26:	e7da      	b.n	80079de <_free_r+0x22>
 8007a28:	d902      	bls.n	8007a30 <_free_r+0x74>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	e7d6      	b.n	80079de <_free_r+0x22>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	1821      	adds	r1, r4, r0
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf04      	itt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	6063      	str	r3, [r4, #4]
 8007a3e:	bf04      	itt	eq
 8007a40:	1809      	addeq	r1, r1, r0
 8007a42:	6021      	streq	r1, [r4, #0]
 8007a44:	6054      	str	r4, [r2, #4]
 8007a46:	e7ca      	b.n	80079de <_free_r+0x22>
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2004214c 	.word	0x2004214c

08007a50 <sbrk_aligned>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4e0f      	ldr	r6, [pc, #60]	@ (8007a90 <sbrk_aligned+0x40>)
 8007a54:	460c      	mov	r4, r1
 8007a56:	6831      	ldr	r1, [r6, #0]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	b911      	cbnz	r1, 8007a62 <sbrk_aligned+0x12>
 8007a5c:	f000 f9d6 	bl	8007e0c <_sbrk_r>
 8007a60:	6030      	str	r0, [r6, #0]
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 f9d1 	bl	8007e0c <_sbrk_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d103      	bne.n	8007a76 <sbrk_aligned+0x26>
 8007a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8007a72:	4620      	mov	r0, r4
 8007a74:	bd70      	pop	{r4, r5, r6, pc}
 8007a76:	1cc4      	adds	r4, r0, #3
 8007a78:	f024 0403 	bic.w	r4, r4, #3
 8007a7c:	42a0      	cmp	r0, r4
 8007a7e:	d0f8      	beq.n	8007a72 <sbrk_aligned+0x22>
 8007a80:	1a21      	subs	r1, r4, r0
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f9c2 	bl	8007e0c <_sbrk_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d1f2      	bne.n	8007a72 <sbrk_aligned+0x22>
 8007a8c:	e7ef      	b.n	8007a6e <sbrk_aligned+0x1e>
 8007a8e:	bf00      	nop
 8007a90:	20042148 	.word	0x20042148

08007a94 <_malloc_r>:
 8007a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a98:	1ccd      	adds	r5, r1, #3
 8007a9a:	f025 0503 	bic.w	r5, r5, #3
 8007a9e:	3508      	adds	r5, #8
 8007aa0:	2d0c      	cmp	r5, #12
 8007aa2:	bf38      	it	cc
 8007aa4:	250c      	movcc	r5, #12
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	db01      	blt.n	8007ab0 <_malloc_r+0x1c>
 8007aac:	42a9      	cmp	r1, r5
 8007aae:	d904      	bls.n	8007aba <_malloc_r+0x26>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b90 <_malloc_r+0xfc>
 8007abe:	f000 f869 	bl	8007b94 <__malloc_lock>
 8007ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac6:	461c      	mov	r4, r3
 8007ac8:	bb44      	cbnz	r4, 8007b1c <_malloc_r+0x88>
 8007aca:	4629      	mov	r1, r5
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff ffbf 	bl	8007a50 <sbrk_aligned>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	d158      	bne.n	8007b8a <_malloc_r+0xf6>
 8007ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8007adc:	4627      	mov	r7, r4
 8007ade:	2f00      	cmp	r7, #0
 8007ae0:	d143      	bne.n	8007b6a <_malloc_r+0xd6>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d04b      	beq.n	8007b7e <_malloc_r+0xea>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4630      	mov	r0, r6
 8007aec:	eb04 0903 	add.w	r9, r4, r3
 8007af0:	f000 f98c 	bl	8007e0c <_sbrk_r>
 8007af4:	4581      	cmp	r9, r0
 8007af6:	d142      	bne.n	8007b7e <_malloc_r+0xea>
 8007af8:	6821      	ldr	r1, [r4, #0]
 8007afa:	1a6d      	subs	r5, r5, r1
 8007afc:	4629      	mov	r1, r5
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ffa6 	bl	8007a50 <sbrk_aligned>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d03a      	beq.n	8007b7e <_malloc_r+0xea>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	442b      	add	r3, r5
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	bb62      	cbnz	r2, 8007b70 <_malloc_r+0xdc>
 8007b16:	f8c8 7000 	str.w	r7, [r8]
 8007b1a:	e00f      	b.n	8007b3c <_malloc_r+0xa8>
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	1b52      	subs	r2, r2, r5
 8007b20:	d420      	bmi.n	8007b64 <_malloc_r+0xd0>
 8007b22:	2a0b      	cmp	r2, #11
 8007b24:	d917      	bls.n	8007b56 <_malloc_r+0xc2>
 8007b26:	1961      	adds	r1, r4, r5
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	6025      	str	r5, [r4, #0]
 8007b2c:	bf18      	it	ne
 8007b2e:	6059      	strne	r1, [r3, #4]
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	bf08      	it	eq
 8007b34:	f8c8 1000 	streq.w	r1, [r8]
 8007b38:	5162      	str	r2, [r4, r5]
 8007b3a:	604b      	str	r3, [r1, #4]
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 f82f 	bl	8007ba0 <__malloc_unlock>
 8007b42:	f104 000b 	add.w	r0, r4, #11
 8007b46:	1d23      	adds	r3, r4, #4
 8007b48:	f020 0007 	bic.w	r0, r0, #7
 8007b4c:	1ac2      	subs	r2, r0, r3
 8007b4e:	bf1c      	itt	ne
 8007b50:	1a1b      	subne	r3, r3, r0
 8007b52:	50a3      	strne	r3, [r4, r2]
 8007b54:	e7af      	b.n	8007ab6 <_malloc_r+0x22>
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	bf0c      	ite	eq
 8007b5c:	f8c8 2000 	streq.w	r2, [r8]
 8007b60:	605a      	strne	r2, [r3, #4]
 8007b62:	e7eb      	b.n	8007b3c <_malloc_r+0xa8>
 8007b64:	4623      	mov	r3, r4
 8007b66:	6864      	ldr	r4, [r4, #4]
 8007b68:	e7ae      	b.n	8007ac8 <_malloc_r+0x34>
 8007b6a:	463c      	mov	r4, r7
 8007b6c:	687f      	ldr	r7, [r7, #4]
 8007b6e:	e7b6      	b.n	8007ade <_malloc_r+0x4a>
 8007b70:	461a      	mov	r2, r3
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d1fb      	bne.n	8007b70 <_malloc_r+0xdc>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	6053      	str	r3, [r2, #4]
 8007b7c:	e7de      	b.n	8007b3c <_malloc_r+0xa8>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	4630      	mov	r0, r6
 8007b84:	f000 f80c 	bl	8007ba0 <__malloc_unlock>
 8007b88:	e794      	b.n	8007ab4 <_malloc_r+0x20>
 8007b8a:	6005      	str	r5, [r0, #0]
 8007b8c:	e7d6      	b.n	8007b3c <_malloc_r+0xa8>
 8007b8e:	bf00      	nop
 8007b90:	2004214c 	.word	0x2004214c

08007b94 <__malloc_lock>:
 8007b94:	4801      	ldr	r0, [pc, #4]	@ (8007b9c <__malloc_lock+0x8>)
 8007b96:	f7ff bf00 	b.w	800799a <__retarget_lock_acquire_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	20042144 	.word	0x20042144

08007ba0 <__malloc_unlock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__malloc_unlock+0x8>)
 8007ba2:	f7ff befb 	b.w	800799c <__retarget_lock_release_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20042144 	.word	0x20042144

08007bac <__sflush_r>:
 8007bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	0716      	lsls	r6, r2, #28
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	d454      	bmi.n	8007c66 <__sflush_r+0xba>
 8007bbc:	684b      	ldr	r3, [r1, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dc02      	bgt.n	8007bc8 <__sflush_r+0x1c>
 8007bc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd48      	ble.n	8007c5a <__sflush_r+0xae>
 8007bc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d045      	beq.n	8007c5a <__sflush_r+0xae>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bd4:	682f      	ldr	r7, [r5, #0]
 8007bd6:	6a21      	ldr	r1, [r4, #32]
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	d030      	beq.n	8007c3e <__sflush_r+0x92>
 8007bdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	0759      	lsls	r1, r3, #29
 8007be2:	d505      	bpl.n	8007bf0 <__sflush_r+0x44>
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bea:	b10b      	cbz	r3, 8007bf0 <__sflush_r+0x44>
 8007bec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b0      	blx	r6
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	d106      	bne.n	8007c0e <__sflush_r+0x62>
 8007c00:	6829      	ldr	r1, [r5, #0]
 8007c02:	291d      	cmp	r1, #29
 8007c04:	d82b      	bhi.n	8007c5e <__sflush_r+0xb2>
 8007c06:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb0 <__sflush_r+0x104>)
 8007c08:	40ca      	lsrs	r2, r1
 8007c0a:	07d6      	lsls	r6, r2, #31
 8007c0c:	d527      	bpl.n	8007c5e <__sflush_r+0xb2>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	6062      	str	r2, [r4, #4]
 8007c12:	04d9      	lsls	r1, r3, #19
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	6022      	str	r2, [r4, #0]
 8007c18:	d504      	bpl.n	8007c24 <__sflush_r+0x78>
 8007c1a:	1c42      	adds	r2, r0, #1
 8007c1c:	d101      	bne.n	8007c22 <__sflush_r+0x76>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	b903      	cbnz	r3, 8007c24 <__sflush_r+0x78>
 8007c22:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c26:	602f      	str	r7, [r5, #0]
 8007c28:	b1b9      	cbz	r1, 8007c5a <__sflush_r+0xae>
 8007c2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	d002      	beq.n	8007c38 <__sflush_r+0x8c>
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7ff fec2 	bl	80079bc <_free_r>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c3c:	e00d      	b.n	8007c5a <__sflush_r+0xae>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b0      	blx	r6
 8007c44:	4602      	mov	r2, r0
 8007c46:	1c50      	adds	r0, r2, #1
 8007c48:	d1c9      	bne.n	8007bde <__sflush_r+0x32>
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0c6      	beq.n	8007bde <__sflush_r+0x32>
 8007c50:	2b1d      	cmp	r3, #29
 8007c52:	d001      	beq.n	8007c58 <__sflush_r+0xac>
 8007c54:	2b16      	cmp	r3, #22
 8007c56:	d11e      	bne.n	8007c96 <__sflush_r+0xea>
 8007c58:	602f      	str	r7, [r5, #0]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e022      	b.n	8007ca4 <__sflush_r+0xf8>
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	e01b      	b.n	8007c9e <__sflush_r+0xf2>
 8007c66:	690f      	ldr	r7, [r1, #16]
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	d0f6      	beq.n	8007c5a <__sflush_r+0xae>
 8007c6c:	0793      	lsls	r3, r2, #30
 8007c6e:	680e      	ldr	r6, [r1, #0]
 8007c70:	bf08      	it	eq
 8007c72:	694b      	ldreq	r3, [r1, #20]
 8007c74:	600f      	str	r7, [r1, #0]
 8007c76:	bf18      	it	ne
 8007c78:	2300      	movne	r3, #0
 8007c7a:	eba6 0807 	sub.w	r8, r6, r7
 8007c7e:	608b      	str	r3, [r1, #8]
 8007c80:	f1b8 0f00 	cmp.w	r8, #0
 8007c84:	dde9      	ble.n	8007c5a <__sflush_r+0xae>
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c8a:	4643      	mov	r3, r8
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b0      	blx	r6
 8007c92:	2800      	cmp	r0, #0
 8007c94:	dc08      	bgt.n	8007ca8 <__sflush_r+0xfc>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	4407      	add	r7, r0
 8007caa:	eba8 0800 	sub.w	r8, r8, r0
 8007cae:	e7e7      	b.n	8007c80 <__sflush_r+0xd4>
 8007cb0:	20400001 	.word	0x20400001

08007cb4 <_fflush_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	690b      	ldr	r3, [r1, #16]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b913      	cbnz	r3, 8007cc4 <_fflush_r+0x10>
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	b118      	cbz	r0, 8007cce <_fflush_r+0x1a>
 8007cc6:	6a03      	ldr	r3, [r0, #32]
 8007cc8:	b90b      	cbnz	r3, 8007cce <_fflush_r+0x1a>
 8007cca:	f7ff fc81 	bl	80075d0 <__sinit>
 8007cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f3      	beq.n	8007cbe <_fflush_r+0xa>
 8007cd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cd8:	07d0      	lsls	r0, r2, #31
 8007cda:	d404      	bmi.n	8007ce6 <_fflush_r+0x32>
 8007cdc:	0599      	lsls	r1, r3, #22
 8007cde:	d402      	bmi.n	8007ce6 <_fflush_r+0x32>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce2:	f7ff fe5a 	bl	800799a <__retarget_lock_acquire_recursive>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	4621      	mov	r1, r4
 8007cea:	f7ff ff5f 	bl	8007bac <__sflush_r>
 8007cee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf0:	07da      	lsls	r2, r3, #31
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	d4e4      	bmi.n	8007cc0 <_fflush_r+0xc>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	d4e1      	bmi.n	8007cc0 <_fflush_r+0xc>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cfe:	f7ff fe4d 	bl	800799c <__retarget_lock_release_recursive>
 8007d02:	e7dd      	b.n	8007cc0 <_fflush_r+0xc>

08007d04 <__swhatbuf_r>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	460c      	mov	r4, r1
 8007d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	b096      	sub	sp, #88	@ 0x58
 8007d10:	4615      	mov	r5, r2
 8007d12:	461e      	mov	r6, r3
 8007d14:	da0d      	bge.n	8007d32 <__swhatbuf_r+0x2e>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d1c:	f04f 0100 	mov.w	r1, #0
 8007d20:	bf14      	ite	ne
 8007d22:	2340      	movne	r3, #64	@ 0x40
 8007d24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d28:	2000      	movs	r0, #0
 8007d2a:	6031      	str	r1, [r6, #0]
 8007d2c:	602b      	str	r3, [r5, #0]
 8007d2e:	b016      	add	sp, #88	@ 0x58
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
 8007d32:	466a      	mov	r2, sp
 8007d34:	f000 f848 	bl	8007dc8 <_fstat_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	dbec      	blt.n	8007d16 <__swhatbuf_r+0x12>
 8007d3c:	9901      	ldr	r1, [sp, #4]
 8007d3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d46:	4259      	negs	r1, r3
 8007d48:	4159      	adcs	r1, r3
 8007d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d4e:	e7eb      	b.n	8007d28 <__swhatbuf_r+0x24>

08007d50 <__smakebuf_r>:
 8007d50:	898b      	ldrh	r3, [r1, #12]
 8007d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d54:	079d      	lsls	r5, r3, #30
 8007d56:	4606      	mov	r6, r0
 8007d58:	460c      	mov	r4, r1
 8007d5a:	d507      	bpl.n	8007d6c <__smakebuf_r+0x1c>
 8007d5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	2301      	movs	r3, #1
 8007d66:	6163      	str	r3, [r4, #20]
 8007d68:	b003      	add	sp, #12
 8007d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6c:	ab01      	add	r3, sp, #4
 8007d6e:	466a      	mov	r2, sp
 8007d70:	f7ff ffc8 	bl	8007d04 <__swhatbuf_r>
 8007d74:	9f00      	ldr	r7, [sp, #0]
 8007d76:	4605      	mov	r5, r0
 8007d78:	4639      	mov	r1, r7
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff fe8a 	bl	8007a94 <_malloc_r>
 8007d80:	b948      	cbnz	r0, 8007d96 <__smakebuf_r+0x46>
 8007d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d86:	059a      	lsls	r2, r3, #22
 8007d88:	d4ee      	bmi.n	8007d68 <__smakebuf_r+0x18>
 8007d8a:	f023 0303 	bic.w	r3, r3, #3
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	e7e2      	b.n	8007d5c <__smakebuf_r+0xc>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	6020      	str	r0, [r4, #0]
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007da6:	b15b      	cbz	r3, 8007dc0 <__smakebuf_r+0x70>
 8007da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dac:	4630      	mov	r0, r6
 8007dae:	f000 f81d 	bl	8007dec <_isatty_r>
 8007db2:	b128      	cbz	r0, 8007dc0 <__smakebuf_r+0x70>
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	431d      	orrs	r5, r3
 8007dc4:	81a5      	strh	r5, [r4, #12]
 8007dc6:	e7cf      	b.n	8007d68 <__smakebuf_r+0x18>

08007dc8 <_fstat_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	@ (8007de8 <_fstat_r+0x20>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	f7f9 f846 	bl	8000e66 <_fstat>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d102      	bne.n	8007de4 <_fstat_r+0x1c>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	b103      	cbz	r3, 8007de4 <_fstat_r+0x1c>
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	bd38      	pop	{r3, r4, r5, pc}
 8007de6:	bf00      	nop
 8007de8:	20042140 	.word	0x20042140

08007dec <_isatty_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d06      	ldr	r5, [pc, #24]	@ (8007e08 <_isatty_r+0x1c>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	f7f9 f845 	bl	8000e86 <_isatty>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_isatty_r+0x1a>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_isatty_r+0x1a>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20042140 	.word	0x20042140

08007e0c <_sbrk_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	@ (8007e28 <_sbrk_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f9 f84e 	bl	8000eb8 <_sbrk>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_sbrk_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_sbrk_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20042140 	.word	0x20042140

08007e2c <_init>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr

08007e38 <_fini>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr
